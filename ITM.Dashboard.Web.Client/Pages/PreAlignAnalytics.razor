@* ITM.Dashboard.Web.Client/Pages/PreAlignAnalytics.razor *@
@page "/prealign-analytics"
@using ITM.Dashboard.Web.Client.Models
@using ITM.Dashboard.Web.Client.Shared
@inject IHttpClientFactory HttpClientFactory

<PageTitle>Pre-Align Analytics</PageTitle>

<MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-2">
    <MudIcon Icon="@Icons.Material.Rounded.GpsFixed" Size="Size.Large" />
    <MudText Typo="Typo.h4">Pre-Align 분석</MudText>
</MudStack>

<MudPaper Class="pa-4 mb-4">
    <MudGrid Spacing="2" AlignItems="AlignItems.Center">
        <MudItem xs="6" sm="4" md="2">
            <MudSelect T="string" Label="Site" Value="_selectedSite" ValueChanged="OnSiteChanged" Dense="true" Margin="Margin.Dense">
                @foreach (var site in _sites)
                {
                    <MudSelectItem T="string" Value="@site">@site</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="6" sm="4" md="2">
            <MudSelect T="string" Label="SDWT" Value="_selectedSdwt" ValueChanged="OnSdwtChanged" Disabled="@(string.IsNullOrEmpty(_selectedSite))" Dense="true" Margin="Margin.Dense">
                @foreach (var sdwt in _sdwts)
                {
                    <MudSelectItem T="string" Value="@sdwt">@sdwt</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="4" md="2">
            <MudAutocomplete T="string" Label="EQP ID" @bind-Value="_selectedEqpId" SearchFunc="SearchEqpids"
                             ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="false" Dense="true" Margin="Margin.Dense"
                             Disabled="@(string.IsNullOrEmpty(_selectedSite))" />
        </MudItem>
        <MudItem xs="6" sm="6" md="2">
            <MudDatePicker Label="Start Date" @bind-Date="_startDate" Dense="true" Margin="Margin.Dense" />
        </MudItem>
        <MudItem xs="6" sm="6" md="2">
            <MudDatePicker Label="End Date" @bind-Date="_endDate" Dense="true" Margin="Margin.Dense" />
        </MudItem>
        <MudItem xs="6" sm="6" md="1">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnSearchClicked" Disabled="@(string.IsNullOrEmpty(_selectedEqpId))" FullWidth="true">Search</MudButton>
        </MudItem>
        <MudItem xs="6" sm="6" md="1">
            <MudButton Variant="Variant.Outlined" OnClick="ResetFilters" FullWidth="true">Reset</MudButton>
        </MudItem>
    </MudGrid>
</MudPaper>

@if (_isLoading)
{
    <div class="d-flex justify-center mt-16">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </div>
}
else if (_isSearched)
{
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h6" GutterBottom="true">Pre-Align Trend</MudText>
        @if (_rawData.Any())
        {
            <AmChart ChartData="_rawData" ChartConfig="_chartConfig" Height="500px" />
        }
        else
        {
            <div class="d-flex justify-center align-center" style="height:500px;">
                <MudText>조회된 데이터가 없습니다.</MudText>
            </div>
        }
    </MudPaper>
}
else
{
    <MudAlert Severity="Severity.Info">조회할 장비를 선택 후, 조회 버튼을 클릭하세요.</MudAlert>
}


@code {
    private bool _isLoading = false;
    private bool _isSearched = false;

    private string? _selectedSite;
    private string? _selectedSdwt;
    private string? _selectedEqpId;
    private DateTime? _startDate = DateTime.Now.Date.AddDays(-6);
    private DateTime? _endDate = DateTime.Now.Date;

    private List<string> _sites = new();
    private List<string> _sdwts = new();
    private List<string> _availableEqpIds = new();

    private List<PreAlignDataDto> _rawData = new();
    private object _chartConfig;

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        _sites = await client.GetFromJsonAsync<List<string>>("api/Filters/sites") ?? new();

        // ▼▼▼ [수정] 요청하신 6가지 기능을 모두 포함하도록 amCharts 설정을 재정의합니다. ▼▼▼
        _chartConfig = new
        {
            xField = "timestamp",
            xTimeUnit = "minute",
            xAxisDateFormat = "yy-MM-dd HH:mm", // 5. X축 라벨 형식
            yAxes = new object[] // 1. Y축 분리
            {
                new { min = -0.4, max = 0.4 }, // 2. Y1축 범위 고정
                new { opposite = true }        // Y2축은 오른쪽에 표시
            },
            series = new object[]
            {
                new {
                    name = "Xmm", valueField = "xmm", seriesType = "line", color = "#33b2ff",
                    yAxisIndex = 0, bulletRadius = 2,
                    tooltipText = "{valueX.formatDate('HH:mm:ss')}: {valueY.formatNumber('#.00')}" // 3, 4. 툴팁 형식
                },
                new {
                    name = "Ymm", valueField = "ymm", seriesType = "line", color = "#39e6a3",
                    yAxisIndex = 0, bulletRadius = 2,
                    tooltipText = "{valueX.formatDate('HH:mm:ss')}: {valueY.formatNumber('#.00')}" // 3, 4. 툴팁 형식
                },
                new {
                    name = "Notch", valueField = "notch", seriesType = "line", color = "#ffcb33",
                    yAxisIndex = 1,
                    tooltipText = "{valueX.formatDate('HH:mm:ss')}: {valueY.formatNumber('#.00')}" // 3, 4. 툴팁 형식
                }
            }
        };
    }

    private async Task OnSiteChanged(string newSite)
    {
        _selectedSite = newSite;
        await ResetDependentFilters("site");
    }

    private async Task OnSdwtChanged(string newSdwt)
    {
        _selectedSdwt = newSdwt;
        await ResetDependentFilters("sdwt");
    }

    private async Task ResetDependentFilters(string level)
    {
        if (level == "site")
        {
            _selectedSdwt = null;
            _sdwts.Clear();
        }
        _selectedEqpId = null;
        _availableEqpIds.Clear();

        if (string.IsNullOrEmpty(_selectedSite)) return;

        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        if (level == "site")
        {
            _sdwts = await client.GetFromJsonAsync<List<string>>($"api/Filters/sdwts/{_selectedSite}") ?? new();
        }

        var url = string.IsNullOrEmpty(_selectedSdwt)
            ? $"api/Filters/eqpidsbysite/{_selectedSite}"
            : $"api/Filters/eqpids/{_selectedSdwt}";
        _availableEqpIds = await client.GetFromJsonAsync<List<string>>(url) ?? new();
        StateHasChanged();
    }

    private async Task<IEnumerable<string>> SearchEqpids(string value, CancellationToken token)
    {
        await Task.Yield();
        if (string.IsNullOrEmpty(value)) return _availableEqpIds;
        return _availableEqpIds.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task OnSearchClicked()
    {
        if (string.IsNullOrEmpty(_selectedEqpId) || _startDate == null || _endDate == null) return;

        _isLoading = true;
        _isSearched = false;
        _rawData.Clear();
        await InvokeAsync(StateHasChanged);

        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        try
        {
            var query = $"eqpid={Uri.EscapeDataString(_selectedEqpId)}&startDate={_startDate.Value:yyyy-MM-dd}&endDate={_endDate.Value:yyyy-MM-dd}";
            var data = await client.GetFromJsonAsync<List<PreAlignDataDto>>($"api/PreAlignAnalytics/data?{query}");
            _rawData = data ?? new List<PreAlignDataDto>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Pre-Align Analytics data: {ex.Message}");
            _rawData.Clear();
        }
        finally
        {
            _isSearched = true;
            _isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void ResetFilters()
    {
        _selectedSite = null;
        _selectedSdwt = null;
        _selectedEqpId = null;
        _startDate = DateTime.Now.Date.AddDays(-6);
        _endDate = DateTime.Now.Date;
        _sdwts.Clear();
        _availableEqpIds.Clear();

        _isSearched = false;
        _rawData.Clear();
        StateHasChanged();
    }
}
