@* ITM.Dashboard.Web.Client/Pages/PreAlignAnalytics.razor *@

@page "/prealign-analytics"
@using ITM.Dashboard.Web.Client.Models
@using ITM.Dashboard.Web.Client.Shared
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime

<PageTitle>PreAlign Data</PageTitle>

<MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-2">
    <MudIcon Icon="@Icons.Material.Rounded.GpsFixed" Size="Size.Large" />
    <MudText Typo="Typo.h4">PreAlign Data</MudText>
</MudStack>

<MudPaper Class="pa-4 mb-4">
    <MudGrid Spacing="2" AlignItems="AlignItems.Center">
        <MudItem xs="6" sm="4" md="2">
            <MudSelect T="string" Label="Site" Value="_selectedSite" ValueChanged="OnSiteChanged" Dense="true" Margin="Margin.Dense">
                @foreach (var site in _sites)
                {
                    <MudSelectItem T="string" Value="@site">@site</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="6" sm="4" md="2">
            <MudSelect T="string" Label="SDWT" Value="_selectedSdwt" ValueChanged="OnSdwtChanged" Disabled="@(string.IsNullOrEmpty(_selectedSite))" Dense="true" Margin="Margin.Dense">
                @foreach (var sdwt in _sdwts)
                {
                    <MudSelectItem T="string" Value="@sdwt">@sdwt</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="4" md="2">
            <MudAutocomplete T="string" Label="EQP ID" @bind-Value="_selectedEqpId" SearchFunc="SearchEqpids"
                             ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="false" Dense="true" Margin="Margin.Dense"
                             Disabled="@(string.IsNullOrEmpty(_selectedSite))" />
        </MudItem>
        <MudItem xs="6" sm="6" md="2">
            <MudDatePicker Label="Start Date" @bind-Date="_startDate" Dense="true" Margin="Margin.Dense" />
        </MudItem>
        <MudItem xs="6" sm="6" md="2">
            <MudDatePicker Label="End Date" @bind-Date="_endDate" Dense="true" Margin="Margin.Dense" />
        </MudItem>
        <MudItem xs="6" sm="6" md="1">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnSearchClicked" Disabled="@(string.IsNullOrEmpty(_selectedEqpId))" FullWidth="true">Search</MudButton>
        </MudItem>
        <MudItem xs="6" sm="6" md="1">
            <MudButton Variant="Variant.Outlined" OnClick="ResetFilters" FullWidth="true">Reset</MudButton>
        </MudItem>
    </MudGrid>
</MudPaper>

@if (_isLoading)
{
    <div class="d-flex justify-center mt-16">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </div>
}
else if (_isSearched)
{
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h6" GutterBottom="true">PreAlign Data Trend</MudText>
        @if (_rawData.Any())
        {
            <AmChart ChartData="_rawData" ChartConfig="_chartConfig" ChartType="PreAlignAnalyticsChart" Height="500px" />
        }
        else
        {
            <div class="d-flex justify-center align-center" style="height:500px;">
                <MudText>조회된 데이터가 없습니다.</MudText>
            </div>
        }
    </MudPaper>
}
else
{
    <MudAlert Severity="Severity.Info">조회할 장비를 선택 후, 조회 버튼을 클릭하세요.</MudAlert>
}


@code {
    private bool _isLoading = false;
    private bool _isSearched = false;

    private string? _selectedSite;
    private string? _selectedSdwt;
    private string? _selectedEqpId;
    private DateTime? _startDate = DateTime.Now.Date.AddDays(-6);
    private DateTime? _endDate = DateTime.Now.Date;

    private List<string> _sites = new();
    private List<string> _sdwts = new();
    private List<string> _availableEqpIds = new();

    private List<PreAlignDataDto> _rawData = new();
    private object _chartConfig;

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        _sites = await client.GetFromJsonAsync<List<string>>("api/Filters/sites") ?? new();

        // ▼▼▼ [수정] tooltipText 부분을 아래와 같이 변경합니다. ▼▼▼
        _chartConfig = new
        {
            xField = "timestamp",
            xTimeUnit = "minute",
            yAxes = new object[]
            {
                new { min = -0.5, max = 0.5 },
                new { opposite = true }
            },
            series = new object[]
            {
                new {
                    name = "Xmm",
                    valueField = "xmm",
                    color = "#33b2ff",
                    yAxisIndex = 0,
                    bulletRadius = 4,
                    tooltipText = "{valueX.formatDate('HH:mm:ss')} {name}: {valueY}" // ✅ 2. 툴팁 형식 변경
                },
                new {
                    name = "Ymm",
                    valueField = "ymm",
                    color = "#39e6a3",
                    yAxisIndex = 0,
                    bulletRadius = 4,
                    tooltipText = "{valueX.formatDate('HH:mm:ss')} {name}: {valueY}" // ✅ 2. 툴팁 형식 변경
                },
                new {
                    name = "Notch",
                    valueField = "notch",
                    color = "#ffcb33",
                    yAxisIndex = 1,
                    bulletRadius = 4,
                    tooltipText = "{valueX.formatDate('HH:mm:ss')} {name}: {valueY}" // ✅ 2. 툴팁 형식 변경
                }
            }
        };
    }

    private async Task OnSiteChanged(string newSite)
    {
        _selectedSite = newSite;
        await ResetDependentFilters("site");
    }

    private async Task OnSdwtChanged(string newSdwt)
    {
        _selectedSdwt = newSdwt;
        await ResetDependentFilters("sdwt");
    }

    private async Task ResetDependentFilters(string level)
    {
        if (level == "site")
        {
            _selectedSdwt = null;
            _sdwts.Clear();
        }
        _selectedEqpId = null;
        _availableEqpIds.Clear();

        if (string.IsNullOrEmpty(_selectedSite)) return;

        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        if (level == "site")
        {
            _sdwts = await client.GetFromJsonAsync<List<string>>($"api/Filters/sdwts/{_selectedSite}") ?? new();
        }

        // ▼▼▼ [수정] EQP ID 목록 조회 URL 변경 ▼▼▼
        var url = string.IsNullOrEmpty(_selectedSdwt)
            ? $"api/Filters/eqpidsbysite/prealign/{_selectedSite}"
            // sdwt가 선택되었을 때의 경로도 prealign 전용으로 수정
            : $"api/Filters/eqpids/prealign/{_selectedSdwt}"; 
        _availableEqpIds = await client.GetFromJsonAsync<List<string>>(url) ?? new();
        StateHasChanged();
    }

    private async Task<IEnumerable<string>> SearchEqpids(string value, CancellationToken token)
    {
        await Task.Yield();

        // ▼▼▼ [핵심 수정] 검색어가 비어있거나, 현재 선택된 EQP ID와 같을 경우 전체 목록을 반환합니다. ▼▼▼
        // 이렇게 하면 사용자가 드롭다운을 열었을 때 항상 모든 선택지를 볼 수 있습니다.
        if (string.IsNullOrEmpty(value) || value == _selectedEqpId)
        {
            return _availableEqpIds;
        }

        // 사용자가 새로운 검색어를 입력하는 경우에만 목록을 필터링합니다.
        return _availableEqpIds.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task OnSearchClicked()
    {
        if (string.IsNullOrEmpty(_selectedEqpId) || _startDate == null || _endDate == null) return;

        _isLoading = true;
        _isSearched = false;
        _rawData.Clear();
        await InvokeAsync(StateHasChanged);

        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        try
        {
            var query = $"eqpid={Uri.EscapeDataString(_selectedEqpId)}&startDate={_startDate.Value:yyyy-MM-dd}&endDate={_endDate.Value:yyyy-MM-dd}";
            var data = await client.GetFromJsonAsync<List<PreAlignDataDto>>($"api/PreAlignAnalytics/data?{query}");
            _rawData = data ?? new List<PreAlignDataDto>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Pre-Align Analytics data: {ex.Message}");
            _rawData.Clear();
        }
        finally
        {
            _isSearched = true;
            _isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void ResetFilters()
    {
        _selectedSite = null;
        _selectedSdwt = null;
        _selectedEqpId = null;
        _startDate = DateTime.Now.Date.AddDays(-6);
        _endDate = DateTime.Now.Date;
        _sdwts.Clear();
        _availableEqpIds.Clear();

        _isSearched = false;
        _rawData.Clear();
        StateHasChanged();
    }
}
