@* ITM.Dashboard.Web.Client/Pages/PreAlignAnalytics.razor *@
@page "/prealign-analytics"
@using ITM.Dashboard.Web.Client.Models
@inject IHttpClientFactory HttpClientFactory

<PageTitle>Pre-Align Analytics</PageTitle>

<MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-2">
    <MudIcon Icon="@Icons.Material.Rounded.GpsFixed" Size="Size.Large" />
    <MudText Typo="Typo.h4">Pre-Align 분석</MudText>
</MudStack>

<MudPaper Class="pa-4 mb-4">
    <MudGrid Spacing="2" AlignItems="AlignItems.Center">
        <MudItem xs="6" sm="4" md="2">
            <MudSelect T="string" Label="Site" Value="_selectedSite" ValueChanged="OnSiteChanged" Dense="true" Margin="Margin.Dense">
                @foreach (var site in _sites)
                {
                    <MudSelectItem T="string" Value="@site">@site</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="6" sm="4" md="2">
            <MudSelect T="string" Label="SDWT" Value="_selectedSdwt" ValueChanged="OnSdwtChanged" Disabled="@(string.IsNullOrEmpty(_selectedSite))" Dense="true" Margin="Margin.Dense">
                @foreach (var sdwt in _sdwts)
                {
                    <MudSelectItem T="string" Value="@sdwt">@sdwt</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="4" md="2">
            <MudAutocomplete T="string" Label="EQP ID" @bind-Value="_selectedEqpId" SearchFunc="SearchEqpids"
                             ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="false" Dense="true" Margin="Margin.Dense"
                             Disabled="@(string.IsNullOrEmpty(_selectedSite))" />
        </MudItem>
        <MudItem xs="6" sm="6" md="2">
            <MudDatePicker Label="Start Date" @bind-Date="_startDate" Dense="true" Margin="Margin.Dense" />
        </MudItem>
        <MudItem xs="6" sm="6" md="2">
            <MudDatePicker Label="End Date" @bind-Date="_endDate" Dense="true" Margin="Margin.Dense" />
        </MudItem>
        <MudItem xs="6" sm="6" md="1">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnSearchClicked" Disabled="@(string.IsNullOrEmpty(_selectedEqpId))" FullWidth="true">Search</MudButton>
        </MudItem>
        <MudItem xs="6" sm="6" md="1">
            <MudButton Variant="Variant.Outlined" OnClick="ResetFilters" FullWidth="true">Reset</MudButton>
        </MudItem>
    </MudGrid>
</MudPaper>

@if (_isLoading)
{
    <div class="d-flex justify-center mt-4">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </div>
}
else if (_isSearched)
{
    <MudGrid Spacing="3">
        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <MudStack Spacing="3">
                    @if (_allSeries.Any())
                    {
                        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.h6">Pre-Align Trend</MudText>
                            <MudStack Row="true">
                                <MudCheckBox T="bool" Checked="@_showXmm" CheckedChanged="@( (bool v) => { _showXmm = v; UpdateVisibleChartSeries(); })" Label="Xmm" Color="Color.Primary" Size="Size.Small" />
                                <MudCheckBox T="bool" Checked="@_showYmm" CheckedChanged="@( (bool v) => { _showYmm = v; UpdateVisibleChartSeries(); })" Label="Ymm" Color="Color.Secondary" Size="Size.Small" />
                                <MudCheckBox T="bool" Checked="@_showNotch" CheckedChanged="@( (bool v) => { _showNotch = v; UpdateVisibleChartSeries(); })" Label="Notch" Color="Color.Success" Size="Size.Small" />
                            </MudStack>
                        </MudStack>

                        <MudChart ChartType="ChartType.Line"
                                  ChartSeries="_visibleSeries"
                                  XAxisLabels="_chartXAxisLabels"
                                  Height="400px"
                                  Options="_chartJsOptions" />

                        <MudRangeSlider Range="_xIndexRange" RangeChanged="OnXIndexRangeChanged"
                                        Min="0" Max="@(_rawData.Count > 0 ? _rawData.Count - 1 : 1)" Step="1" />
                        <div>
                            X축 범위:
                            <MudChip T="object" Size="Size.Small" Color="Color.Secondary">@_chartXAxisLabels.FirstOrDefault()</MudChip> ~
                            <MudChip T="object" Size="Size.Small" Color="Color.Secondary">@_chartXAxisLabels.LastOrDefault()</MudChip>
                        </div>
                    }
                    else
                    {
                        <MudText>데이터가 없습니다.</MudText>
                    }
                </MudStack>
            </MudPaper>
        </MudItem>
    </MudGrid>
}
else
{
    <MudAlert Severity="Severity.Info">조회할 장비를 선택 후, 조회 버튼을 클릭하세요.</MudAlert>
}


@code {
    private bool _isLoading = false;
    private bool _isSearched = false;

    private string? _selectedSite;
    private string? _selectedSdwt;
    private string? _selectedEqpId;
    private DateTime? _startDate = DateTime.Now.Date.AddDays(-6);
    private DateTime? _endDate = DateTime.Now.Date;

    private List<string> _sites = new();
    private List<string> _sdwts = new();
    private List<string> _availableEqpIds = new();
    private List<PreAlignDataDto> _rawData = new();

    private List<ChartSeries> _allSeries = new();
    private List<ChartSeries> _visibleSeries = new();
    private string[] _chartXAxisLabels = Array.Empty<string>();
    private object _chartJsOptions = new();

    private bool _showXmm = true;
    private bool _showYmm = true;
    private bool _showNotch = true;

    private Range<int> _xIndexRange = new(0, 1);

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        _sites = await client.GetFromJsonAsync<List<string>>("api/Filters/sites") ?? new();
        _chartJsOptions = new { scales = new { y = new { suggestedMin = -0.1, suggestedMax = 0.1 } } };
    }

    private void OnXIndexRangeChanged(Range<int> newRange)
    {
        _xIndexRange = newRange;
        ApplyXFilterAndUpdateChart();
    }

    private async Task OnSiteChanged(string newSite)
    {
        _selectedSite = newSite;
        await ResetDependentFilters("site");
    }

    private async Task OnSdwtChanged(string newSdwt)
    {
        _selectedSdwt = newSdwt;
        await ResetDependentFilters("sdwt");
    }

    private async Task ResetDependentFilters(string level)
    {
        if (level == "site")
        {
            _selectedSdwt = null;
            _sdwts.Clear();
        }
        _selectedEqpId = null;
        _availableEqpIds.Clear();
        if (!string.IsNullOrEmpty(_selectedSite))
        {
            var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
            if (level == "site")
            {
                _sdwts = await client.GetFromJsonAsync<List<string>>($"api/Filters/sdwts/{_selectedSite}") ?? new();
            }

            var url = string.IsNullOrEmpty(_selectedSdwt)
                ? $"api/Filters/eqpidsbysite/{_selectedSite}"
                : $"api/Filters/eqpids/{_selectedSdwt}";
            _availableEqpIds = await client.GetFromJsonAsync<List<string>>(url) ?? new();
        }
        StateHasChanged();
    }

    private async Task<IEnumerable<string>> SearchEqpids(string value, CancellationToken token)
    {
        await Task.Yield();
        if (string.IsNullOrEmpty(value)) return _availableEqpIds;
        return _availableEqpIds.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task OnSearchClicked()
    {
        if (string.IsNullOrEmpty(_selectedEqpId) || _startDate == null || _endDate == null) return;
        _isLoading = true;
        _isSearched = true;
        ClearResults();
        StateHasChanged();

        try
        {
            var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
            var query = $"eqpid={Uri.EscapeDataString(_selectedEqpId)}&startDate={_startDate.Value:yyyy-MM-dd}&endDate={_endDate.Value:yyyy-MM-dd}";
            var data = await client.GetFromJsonAsync<List<PreAlignDataDto>>($"api/PreAlignAnalytics/data?{query}");

            if (data != null && data.Any())
            {
                _rawData = data;
                _xIndexRange = new Range<int>(0, _rawData.Count > 0 ? _rawData.Count - 1 : 1);
                PrepareAndFilterChartData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Pre-Align Analytics data: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void ResetFilters()
    {
        _selectedSite = null;
        _selectedSdwt = null;
        _selectedEqpId = null;
        _startDate = DateTime.Now.Date.AddDays(-6);
        _endDate = DateTime.Now.Date;
        _sdwts.Clear();
        _availableEqpIds.Clear();
        _isSearched = false;
        ClearResults();
        _xIndexRange = new Range<int>(0, 1);
        StateHasChanged();
    }

    private void ClearResults()
    {
        _rawData.Clear();
        _allSeries.Clear();
        _visibleSeries.Clear();
        _chartXAxisLabels = Array.Empty<string>();
    }

    private void PrepareAndFilterChartData()
    {
        if (!_rawData.Any()) return;

        _allSeries = new List<ChartSeries>
        {
            new ChartSeries { Name = "Xmm", Data = _rawData.Select(d => d.Xmm).ToArray() },
            new ChartSeries { Name = "Ymm", Data = _rawData.Select(d => d.Ymm).ToArray() },
            new ChartSeries { Name = "Notch", Data = _rawData.Select(d => d.Notch).ToArray() }
        };

        ApplyXFilterAndUpdateChart();
    }

    private void ApplyXFilterAndUpdateChart()
    {
        if (!_rawData.Any()) return;

        var start = Math.Max(0, _xIndexRange.Start);
        var end = Math.Min(_rawData.Count - 1, _xIndexRange.End);

        if (start > end) return;

        var filteredRawData = _rawData.Skip(start).Take(end - start + 1).ToList();
        _chartXAxisLabels = filteredRawData.Select(d => d.Timestamp.ToString("MM-dd HH:mm")).ToArray();
        
        UpdateVisibleChartSeries();
    }

    private void UpdateVisibleChartSeries()
    {
        if (!_allSeries.Any() || !_rawData.Any()) return;
        
        var start = Math.Max(0, _xIndexRange.Start);
        var end = Math.Min(_rawData.Count - 1, _xIndexRange.End);

        if (start > end) 
        {
            _visibleSeries = new List<ChartSeries>();
            StateHasChanged();
            return;
        };

        var tempSeries = new List<ChartSeries>();
        if (_showXmm)
        {
            var xmmData = _allSeries.FirstOrDefault(s => s.Name == "Xmm")?.Data;
            if (xmmData != null)
                tempSeries.Add(new ChartSeries { Name = "Xmm", Data = xmmData.Skip(start).Take(end - start + 1).ToArray() });
        }
        if (_showYmm)
        {
            var ymmData = _allSeries.FirstOrDefault(s => s.Name == "Ymm")?.Data;
            if (ymmData != null)
                tempSeries.Add(new ChartSeries { Name = "Ymm", Data = ymmData.Skip(start).Take(end - start + 1).ToArray() });
        }
        if (_showNotch)
        {
            var notchData = _allSeries.FirstOrDefault(s => s.Name == "Notch")?.Data;
            if (notchData != null)
                tempSeries.Add(new ChartSeries { Name = "Notch", Data = notchData.Skip(start).Take(end - start + 1).ToArray() });
        }
        _visibleSeries = tempSeries;
        StateHasChanged();
    }
}
