@* ITM.Dashboard/ITM.Dashboard.Web.Client/Pages/LotUniformityTrend.razor *@

@page "/lot-uniformity-trend"
@using ITM.Dashboard.Web.Client.Models
@using ITM.Dashboard.Web.Client.Shared
@inject IHttpClientFactory HttpClientFactory

<PageTitle>Lot Uniformity Trend</PageTitle>

<style>
    .overflow-y-auto {
        overflow-y: hidden !important;
    }
</style>

<MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-2">
    <MudIcon Icon="@Icons.Material.Rounded.StackedLineChart" Size="Size.Large" />
    <MudText Typo="Typo.h4">Lot Uniformity Trend</MudText>
</MudStack>

<MudPaper Class="pa-4 mb-4">
    @* 필터 UI는 변경사항 없음 *@
    <MudGrid Spacing="2" Justify="Justify.FlexStart">
        @* --- 1열 --- *@
        <MudItem xs="12" sm="4" md="2">
            <MudSelect T="string" Label="Site" Required="true" Value="_selectedSite" ValueChanged="OnSiteChanged" Dense="true" Margin="Margin.Dense">
                @foreach (var site in _sites)
                {
                    <MudSelectItem Value="@site">@site</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="4" md="2">
            <MudSelect T="string" Label="SDWT" Required="true" Value="_selectedSdwt" ValueChanged="OnSdwtChanged" Disabled="string.IsNullOrEmpty(_selectedSite)" Dense="true" Margin="Margin.Dense">
                @foreach (var sdwt in _sdwts)
                {
                    <MudSelectItem Value="@sdwt">@sdwt</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="4" md="2"><MudAutocomplete T="string" Label="EQP ID" SearchFunc="SearchEqpIds" Required="true" Value="_selectedEqpId" ValueChanged="OnEqpidChanged" Disabled="string.IsNullOrEmpty(_selectedSdwt)" Dense="true" Margin="Margin.Dense" MaxItems="null" /></MudItem>
        <MudItem xs="12" sm="6" md="3"><MudDatePicker Label="Start Date" @bind-Date="_startDate" @bind-Date:after="() => InvokeAsync(OnDateChanged)" Dense="true" Margin="Margin.Dense" PickerVariant="PickerVariant.Dialog" /></MudItem>
        <MudItem xs="12" sm="6" md="3"><MudDatePicker Label="End Date" @bind-Date="_endDate" @bind-Date:after="() => InvokeAsync(OnDateChanged)" Dense="true" Margin="Margin.Dense" PickerVariant="PickerVariant.Dialog" /></MudItem>

        @* --- 2열 --- *@
        <MudItem xs="12" sm="4" md="2"><MudAutocomplete T="string" Label="Lot ID" SearchFunc="SearchLotIds" Required="true" Value="_selectedLotId" ValueChanged="OnLotIdChanged" Disabled="string.IsNullOrEmpty(_selectedEqpId)" Dense="true" Margin="Margin.Dense" MaxItems="null" /></MudItem>
        <MudItem xs="12" sm="4" md="2"><MudAutocomplete T="string" Label="Cassette RCP" SearchFunc="SearchCassetteRcps" Required="true" Value="_selectedCassetteRcp" ValueChanged="OnCassetteRcpChanged" Disabled="string.IsNullOrEmpty(_selectedLotId)" Dense="true" Margin="Margin.Dense" MaxItems="null" /></MudItem>
        <MudItem xs="12" sm="4" md="2"><MudAutocomplete T="string" Label="Stage Group" SearchFunc="SearchStageGroups" Required="true" Value="_selectedStageGroup" ValueChanged="OnStageGroupChanged" Disabled="string.IsNullOrEmpty(_selectedCassetteRcp)" Dense="true" Margin="Margin.Dense" MaxItems="null" /></MudItem>
        <MudItem xs="12" sm="4" md="2"><MudAutocomplete T="string" Label="Film" SearchFunc="SearchFilms" Value="_selectedFilm" ValueChanged="OnFilmChanged" Disabled="string.IsNullOrEmpty(_selectedStageGroup)" Dense="true" Margin="Margin.Dense" MaxItems="null" /></MudItem>
        <MudItem xs="12" sm="4" md="2">
            <MudSelect T="string" Label="Y-Axis Metric" Value="_selectedMetric" ValueChanged="OnMetricChanged" Dense="true" Margin="Margin.Dense">
                @foreach (var metric in _availableMetrics)
                {
                    <MudSelectItem Value="@metric">@metric.ToUpper()</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="6" sm="2" md="1"><MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnSearchClicked" Disabled="string.IsNullOrEmpty(_selectedStageGroup)" FullWidth="true">Search</MudButton></MudItem>
        <MudItem xs="6" sm="2" md="1"><MudButton Variant="Variant.Outlined" OnClick="ResetFilters" FullWidth="true">Reset</MudButton></MudItem>
    </MudGrid>
</MudPaper>

@if (_isLoading)
{
    <div class="d-flex justify-center mt-16"><MudProgressCircular Color="Color.Primary" Indeterminate="true" /></div>
}
else if (_isSearched)
{
    @* ▼▼▼ [수정] 차트 영역을 MudGrid로 감싸 2/3, 1/3 비율로 나눕니다. ▼▼▼ *@
    <MudGrid>
        <MudItem xs="12" md="8">
            <MudPaper Class="pa-4" Style="height: 100%;">
                @if (_lineChartData.Any())
                {
                    <AmChart ChartData="_lineChartData" ChartConfig="_lineChartConfig" ChartType="LotUniformityChart" Height="500px" />
                }
                else
                {
                    <div class="d-flex justify-center align-center" style="height:500px;"><MudText>라인 차트 데이터가 없습니다.</MudText></div>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudPaper Class="pa-4" Style="height: 100%;">
                @if (_mapChartData.Any())
                {
                    <AmChart ChartData="_mapChartData" ChartConfig="_mapChartConfig" ChartType="LotUniformityMapChart" Height="500px" />
                }
                else
                {
                    <div class="d-flex justify-center align-center" style="height:500px;"><MudText>Wafer Map 데이터가 없습니다.</MudText></div>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
    @* ▲▲▲ [수정] 여기까지 ▲▲▲ *@
}
else
{
    <MudAlert Severity="Severity.Info">조회할 필터를 모두 선택 후, 조회 버튼을 클릭하세요.</MudAlert>
}

@code {
    private bool _isLoading = false, _isSearched = false;
    private string _selectedSite, _selectedSdwt, _selectedEqpId, _selectedLotId, _selectedCassetteRcp, _selectedStageGroup, _selectedFilm, _selectedMetric = "t1";
    private DateTime? _startDate = DateTime.Now.Date.AddDays(-6), _endDate = DateTime.Now.Date;
    private List<string> _sites = new(), _sdwts = new(), _availableEqpIds = new(), _availableLotIds = new(), _availableCassetteRcps = new(), _availableStageGroups = new(), _availableFilms = new(), _availableMetrics = new();

    private List<LotUniformityChartData> _lineChartData = new();
    private List<LotUniformityChartData> _mapChartData = new();

    private object _lineChartConfig;
    private object _mapChartConfig;

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        _sites = await client.GetFromJsonAsync<List<string>>("api/Filters/sites") ?? new();

        _mapChartConfig = new { pointColor = "#81C784" };
    }

    private async Task OnDateChanged()
    {
        if (!string.IsNullOrEmpty(_selectedEqpId))
        {
            await UpdateLotIds();
            await OnLotIdChanged(null);
        }
    }
    private async Task OnMetricChanged(string newMetric) => _selectedMetric = newMetric;
    private async Task OnSiteChanged(string value)
    {
        _selectedSite = value;
        _selectedSdwt = null;
        _sdwts.Clear();
        if (!string.IsNullOrEmpty(_selectedSite))
        {
            var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
            _sdwts = await client.GetFromJsonAsync<List<string>>($"api/Filters/sdwts/{_selectedSite}") ?? new();
        }
        await OnSdwtChanged(null);
    }
    private async Task OnSdwtChanged(string value)
    {
        _selectedSdwt = value;
        _selectedEqpId = null; _availableEqpIds.Clear();
        if (!string.IsNullOrEmpty(_selectedSdwt))
        {
            var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
            _availableEqpIds = await client.GetFromJsonAsync<List<string>>($"api/Filters/eqpids/{_selectedSdwt}") ?? new();
        }
        await OnEqpidChanged(null);
    }
    private async Task OnEqpidChanged(string value)
    {
        _selectedEqpId = value;
        _selectedLotId = null; _availableLotIds.Clear();
        if (!string.IsNullOrEmpty(_selectedEqpId))
        {
            await UpdateLotIds();
        }
        await OnLotIdChanged(null);
    }
    private async Task OnLotIdChanged(string value)
    {
        _selectedLotId = value;
        _selectedCassetteRcp = null; _availableCassetteRcps.Clear();
        if (!string.IsNullOrEmpty(_selectedLotId))
        {
            await UpdateCassetteRcps();
        }
        await OnCassetteRcpChanged(null);
    }
    private async Task OnCassetteRcpChanged(string value)
    {
        _selectedCassetteRcp = value;
        _selectedStageGroup = null; _availableStageGroups.Clear();
        if (!string.IsNullOrEmpty(_selectedCassetteRcp))
        {
            await UpdateStageGroups();
        }
        await OnStageGroupChanged(null);
    }
    private async Task OnStageGroupChanged(string value)
    {
        _selectedStageGroup = value;
        _selectedFilm = null; _availableFilms.Clear();
        if (!string.IsNullOrEmpty(_selectedStageGroup))
        {
            await UpdateFilms();
        }
        await UpdateAvailableMetricsAsync();
    }
    private async Task OnFilmChanged(string value)
    {
        _selectedFilm = value;
        await UpdateAvailableMetricsAsync();
    }
    private async Task UpdateAvailableMetricsAsync()
    {
        if (string.IsNullOrEmpty(_selectedStageGroup))
        {
            _availableMetrics.Clear();
            _selectedMetric = "t1";
            return;
        }
        var query = BuildFilterQueryString();
        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        _availableMetrics = await client.GetFromJsonAsync<List<string>>($"api/Filters/availablemetrics?{query}") ?? new();
        if (_availableMetrics.Any())
        {
            _selectedMetric = _availableMetrics.Contains("t1") ? "t1" : _availableMetrics.First();
        }
        else
        {
            _selectedMetric = null;
        }
    }
    private async Task UpdateLotIds()
    {
        var query = $"eqpid={Uri.EscapeDataString(_selectedEqpId)}&startDate={_startDate:yyyy-MM-dd}&endDate={_endDate:yyyy-MM-dd}";
        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        _availableLotIds = await client.GetFromJsonAsync<List<string>>($"api/Filters/lotids?{query}") ?? new();
    }
    private async Task UpdateCassetteRcps()
    {
        var query = $"eqpid={Uri.EscapeDataString(_selectedEqpId)}&startDate={_startDate:yyyy-MM-dd}&endDate={_endDate:yyyy-MM-dd}&lotId={Uri.EscapeDataString(_selectedLotId)}";
        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        _availableCassetteRcps = await client.GetFromJsonAsync<List<string>>($"api/Filters/cassettercps?{query}") ?? new();
    }
    private async Task UpdateStageGroups()
    {
        var query = $"eqpid={Uri.EscapeDataString(_selectedEqpId)}&startDate={_startDate:yyyy-MM-dd}&endDate={_endDate:yyyy-MM-dd}&lotId={Uri.EscapeDataString(_selectedLotId)}&cassetteRcp={Uri.EscapeDataString(_selectedCassetteRcp)}";
        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        _availableStageGroups = await client.GetFromJsonAsync<List<string>>($"api/Filters/stagegroups?{query}") ?? new();
    }
    private async Task UpdateFilms()
    {
        var query = $"eqpid={Uri.EscapeDataString(_selectedEqpId)}&startDate={_startDate:yyyy-MM-dd}&endDate={_endDate:yyyy-MM-dd}&lotId={Uri.EscapeDataString(_selectedLotId)}&cassetteRcp={Uri.EscapeDataString(_selectedCassetteRcp)}&stageGroup={Uri.EscapeDataString(_selectedStageGroup)}";
        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        _availableFilms = await client.GetFromJsonAsync<List<string>>($"api/Filters/films?{query}") ?? new();
    }
    private async Task<IEnumerable<string>> SearchEqpIds(string value, CancellationToken token)
    {
        await Task.Yield();
        if (string.IsNullOrEmpty(value) || value == _selectedEqpId) return _availableEqpIds;
        return _availableEqpIds.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    private async Task<IEnumerable<string>> SearchLotIds(string value, CancellationToken token)
    {
        await Task.Yield();
        if (string.IsNullOrEmpty(value) || value == _selectedLotId) return _availableLotIds;
        return _availableLotIds.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    private async Task<IEnumerable<string>> SearchCassetteRcps(string value, CancellationToken token)
    {
        await Task.Yield();
        if (string.IsNullOrEmpty(value) || value == _selectedCassetteRcp) return _availableCassetteRcps;
        return _availableCassetteRcps.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    private async Task<IEnumerable<string>> SearchStageGroups(string value, CancellationToken token)
    {
        await Task.Yield();
        if (string.IsNullOrEmpty(value) || value == _selectedStageGroup) return _availableStageGroups;
        return _availableStageGroups.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    private async Task<IEnumerable<string>> SearchFilms(string value, CancellationToken token)
    {
        await Task.Yield();
        if (string.IsNullOrEmpty(value) || value == _selectedFilm) return _availableFilms;
        return _availableFilms.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task OnSearchClicked()
    {
        _isLoading = true;
        _isSearched = false;
        _lineChartData.Clear();
        _mapChartData.Clear();
        await InvokeAsync(StateHasChanged);

        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        try
        {
            var query = BuildFilterQueryString(true);
            var seriesData = await client.GetFromJsonAsync<List<LotUniformitySeriesDto>>($"api/LotUniformity/trend?{query}");

            var allPoints = seriesData?.SelectMany(series => series.DataPoints.Select(dp => new LotUniformityChartData
            {
                WaferId = series.WaferId,
                Point = dp.Point,
                Value = dp.Value,
                X = dp.X,
                Y = dp.Y,
                DieCol = dp.DieCol,
                DieRow = dp.DieRow
            })).ToList() ?? new List<LotUniformityChartData>();

            _lineChartData = allPoints;

            if (allPoints.Any())
            {
                var uniquePoints = allPoints.GroupBy(p => p.Point).Select(g => g.First()).ToList();
                bool useDieCoords = uniquePoints.First().DieCol.HasValue;

                if (useDieCoords)
                {
                    _mapChartData = uniquePoints.Select(p => {
                        p.MapX = p.DieCol + 0.5;
                        p.MapY = p.DieRow + 1;
                        return p;
                    }).ToList();
                }
                else
                {
                    double maxAbsCoord = 0;
                    foreach (var p in uniquePoints)
                    {
                        if (Math.Abs(p.X) > maxAbsCoord) maxAbsCoord = Math.Abs(p.X);
                        if (Math.Abs(p.Y) > maxAbsCoord) maxAbsCoord = Math.Abs(p.Y);
                    }

                    if (maxAbsCoord > 0)
                    {
                        const double scaleFactor = 4.8;
                        _mapChartData = uniquePoints.Select(p => {
                            p.MapX = (p.X / maxAbsCoord) * scaleFactor;
                            p.MapY = (p.Y / maxAbsCoord) * scaleFactor;
                            return p;
                        }).ToList();
                    }
                    else
                    {
                        _mapChartData = uniquePoints;
                    }
                }
            }

            _lineChartConfig = new { xTitle = "Point #", yTitle = _selectedMetric.ToUpper() };
        }
        catch (Exception ex) { Console.WriteLine($"Error loading chart data: {ex.Message}"); }
        finally
        {
            _isSearched = true;
            _isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ResetFilters()
    {
        _selectedSite = _selectedSdwt = _selectedEqpId = _selectedLotId = _selectedCassetteRcp = _selectedStageGroup = _selectedFilm = null;
        _startDate = DateTime.Now.Date.AddDays(-6); _endDate = DateTime.Now.Date;
        _sdwts.Clear(); _availableEqpIds.Clear(); _availableLotIds.Clear(); _availableCassetteRcps.Clear(); _availableStageGroups.Clear(); _availableFilms.Clear();
        _isSearched = false;
        _lineChartData.Clear();
        _mapChartData.Clear();

        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        _sites = await client.GetFromJsonAsync<List<string>>("api/Filters/sites") ?? new();
        StateHasChanged();
    }

    private string BuildFilterQueryString(bool forSearch = false)
    {
        var query = new System.Text.StringBuilder();
        query.Append($"eqpid={Uri.EscapeDataString(_selectedEqpId ?? string.Empty)}");
        query.Append($"&startDate={_startDate:yyyy-MM-dd}");
        query.Append($"&endDate={_endDate:yyyy-MM-dd}");

        if (!string.IsNullOrEmpty(_selectedLotId)) query.Append($"&lotId={Uri.EscapeDataString(_selectedLotId)}");
        if (!string.IsNullOrEmpty(_selectedCassetteRcp)) query.Append($"&cassetteRcp={Uri.EscapeDataString(_selectedCassetteRcp)}");
        if (!string.IsNullOrEmpty(_selectedStageGroup)) query.Append($"&stageGroup={Uri.EscapeDataString(_selectedStageGroup)}");
        if (!string.IsNullOrEmpty(_selectedFilm)) query.Append($"&film={Uri.EscapeDataString(_selectedFilm)}");

        if (forSearch) query.Append($"&yAxisMetric={Uri.EscapeDataString(_selectedMetric)}");
        return query.ToString();
    }
}
