@* ITM.Dashboard.Web.Client/Pages/EquipmentExplorer.razor *@

@page "/equipment-explorer"
@using ITM.Dashboard.Web.Client.Models
@inject IHttpClientFactory HttpClientFactory

<PageTitle>Equipment Specs</PageTitle>

<style>
    .custom-table {
        width: 100%;
        border-spacing: 0;
        border-collapse: collapse;
    }

        .custom-table th, .custom-table td {
            padding: 10px;
            font-size: 0.8rem;
            line-height: 1.4;
            border-bottom: 1px solid var(--mud-palette-divider);
            text-align: left;
        }

        .custom-table th {
            font-weight: 500;
            vertical-align: middle;
            white-space: nowrap;
        }

        .custom-table tbody tr:hover {
            background-color: var(--mud-palette-action-hover);
        }

        /* ▼▼▼ [핵심 수정 1/3] 테이블 홀수 행에 명확한 배경색을 적용합니다. ▼▼▼ */
        .custom-table.striped tbody tr:nth-child(odd) {
            background-color: rgba(0,0,0, 0.02); /* 라이트 모드용 줄무늬 색상 */
        }

    .mud-theme-dark .custom-table.striped tbody tr:nth-child(odd) {
        background-color: rgba(255,255,255, 0.04); /* 다크 모드용 줄무늬 색상 */
    }

    .grid-container {
        overflow-x: auto;
    }
</style>

<MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-2">
    <MudIcon Icon="@Icons.Material.Rounded.Computer" Size="Size.Large" />
    <MudText Typo="Typo.h4">ITM Equip Specs</MudText>
</MudStack>

<MudPaper Class="pa-2 mb-4">
    <MudGrid Spacing="2" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
        <MudItem xs="12" sm="4" md="3">
            <MudSelect T="string" Label="Site" Value="_selectedSite" ValueChanged="OnSiteChanged"
                       Dense="true" Margin="Margin.Dense" Required="true" RequiredError="Site는 필수입니다."
                       Variant="Variant.Outlined">
                @foreach (var site in _sites)
                {
                    <MudSelectItem T="string" Value="@site">@site</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="4" md="3">
            <MudSelect T="string" Label="SDWT (All)" Value="_selectedSdwt" ValueChanged="OnSdwtChanged"
                       Disabled="@(string.IsNullOrEmpty(_selectedSite))"
                       Dense="true" Margin="Margin.Dense" Clearable="true" Variant="Variant.Outlined">
                @foreach (var sdwt in _sdwts)
                {
                    <MudSelectItem T="string" Value="@sdwt">@sdwt</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="4" md="3">
            <MudAutocomplete T="string" Label="EQP ID (All)" Value="_selectedEqpId" ValueChanged="OnEqpIdChanged"
                             SearchFunc="SearchEqpIds"
                             Disabled="@(string.IsNullOrEmpty(_selectedSite))"
                             Dense="true" Margin="Margin.Dense" Clearable="true" Variant="Variant.Outlined"
                             ResetValueOnEmptyText="true" CoerceText="false" />
        </MudItem>
    </MudGrid>
</MudPaper>

@if (_isLoading)
{
    <div class="d-flex justify-center align-center pa-4">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </div>
}
else if (!_isInitialState)
{
    <MudPaper Class="grid-container" Outlined="true">
        <table class="custom-table striped">
            <thead class="mud-table-head">
                <tr>
                    <th rowspan="2" style="min-width: 130px; text-align: left;">EQP ID</th>
                    @* ▼▼▼ [핵심 수정 2/3] 그룹 헤더 첫 행에만 구분선을 적용합니다. ▼▼▼ *@
                    <th colspan="6" style="text-align: center; border-right: 1px solid var(--mud-palette-divider);">ITM INFO</th>
                    <th colspan="10" style="text-align: center;">HOST SERVER INFO</th>
                    <th rowspan="2" style="min-width: 120px; text-align: left;">Last Contact</th>
                </tr>
                <tr>
                    <th style="min-width: 100px;">ITM Type</th>
                    <th style="min-width: 150px;">Model</th>
                    <th style="min-width: 150px;">Application</th>
                    <th style="min-width: 90px;">App Ver</th>
                    <th style="min-width: 90px;">DB Ver</th>
                    @* ▼▼▼ [핵심 수정 3/3] 두 번째 행의 구분선을 제거합니다. ▼▼▼ *@
                    <th style="min-width: 150px;">Serial Num</th>

                    <th style="min-width: 150px;">PC Name</th>
                    <th style="min-width: 130px;">IP Address</th>
                    <th style="min-width: 150px;">MAC Address</th>
                    <th style="min-width: 180px;">Operation System(OS)</th>
                    <th style="min-width: 90px;">Locale</th>
                    <th style="min-width: 90px;">Timezone</th>
                    <th style="min-width: 250px;">CPU</th>
                    <th style="min-width: 150px;">Memory</th>
                    <th style="min-width: 250px;">Disk</th>
                    <th style="min-width: 250px;">VGA</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var context in _pagedEquipmentList)
                {
                    <tr>
                        <td style="text-align: left;">@context.EqpId</td>
                        <td>@context.Type</td>
                        <td>@context.SystemModel</td>
                        <td>@context.Application</td>
                        <td>@context.Version</td>
                        <td>@context.DbVersion</td>
                        <td>@context.SerialNum</td>
                        <td>@context.PcName</td>
                        <td>@context.IpAddress</td>
                        <td>@context.MacAddress</td>
                        <td>@FormatOperatingSystem(context.Os, context.SystemType)</td>
                        <td>@context.Locale</td>
                        <td>@FormatTimezone(context.Timezone)</td>
                        <td>@context.Cpu</td>
                        <td>@context.Memory</td>
                        <td>@context.Disk</td>
                        <td>@context.Vga</td>
                        <td style="text-align: left;">@context.LastContact?.ToString("yy-MM-dd")</td>
                    </tr>
                }
            </tbody>
        </table>
    </MudPaper>
    <MudPagination Count="_totalPages" SelectedChanged="OnPageChanged" Class="mt-4" />
}
else
{
    <MudAlert Severity="Severity.Info">Site를 선택하여 장비 정보를 조회하세요.</MudAlert>
}


@code {
    private List<string> _sites = new();
    private List<string> _sdwts = new();
    private List<string> _availableEqpIds = new();

    private string _selectedSite;
    private string _selectedSdwt;
    private string _selectedEqpId;
    private bool _isLoading = false;
    private bool _isInitialState = true;

    // Pagination
    private List<EquipmentSpecDto> _equipmentList = new();
    private IEnumerable<EquipmentSpecDto> _pagedEquipmentList = new List<EquipmentSpecDto>();
    private int _currentPage = 1;
    private int _rowsPerPage = 15;
    private int _totalPages = 0;

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        _sites = await client.GetFromJsonAsync<List<string>>("api/Filters/sites") ?? new();
    }

    private void UpdatePagination()
    {
        _totalPages = (int)Math.Ceiling(_equipmentList.Count / (double)_rowsPerPage);
        _pagedEquipmentList = _equipmentList.Skip((_currentPage - 1) * _rowsPerPage).Take(_rowsPerPage);
        StateHasChanged();
    }

    private void OnPageChanged(int page)
    {
        _currentPage = page;
        UpdatePagination();
    }

    private async Task OnSiteChanged(string newSite)
    {
        _selectedSite = newSite;
        _selectedSdwt = null;
        _selectedEqpId = null;
        _sdwts.Clear();
        _availableEqpIds.Clear();
        _equipmentList.Clear();
        _isInitialState = true;
        if (!string.IsNullOrEmpty(_selectedSite))
        {
            var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
            _sdwts = await client.GetFromJsonAsync<List<string>>($"api/Filters/sdwts/{_selectedSite}") ?? new();
            _availableEqpIds = await client.GetFromJsonAsync<List<string>>($"api/Equipment/eqpids?site={_selectedSite}") ?? new();
        }
        UpdatePagination();
    }

    private async Task OnSdwtChanged(string newSdwt)
    {
        _selectedSdwt = newSdwt;
        _selectedEqpId = null;

        if (!string.IsNullOrEmpty(_selectedSite))
        {
            var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
            if (!string.IsNullOrEmpty(_selectedSdwt))
            {
                _availableEqpIds = await client.GetFromJsonAsync<List<string>>($"api/Equipment/eqpids?sdwt={_selectedSdwt}") ?? new();
            }
            else
            {
                _availableEqpIds = await client.GetFromJsonAsync<List<string>>($"api/Equipment/eqpids?site={_selectedSite}") ?? new();
            }
        }
        await LoadEquipmentDetails();
    }

    private async Task OnEqpIdChanged(string newEqpId)
    {
        _selectedEqpId = newEqpId;
        await LoadEquipmentDetails();
    }

    private async Task LoadEquipmentDetails()
    {
        if (string.IsNullOrEmpty(_selectedSite))
        {
            _equipmentList.Clear();
            _isInitialState = true;
            UpdatePagination();
            StateHasChanged();
            return;
        }

        _isLoading = true;
        _isInitialState = false;
        StateHasChanged();

        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        var query = new List<string>();

        if (!string.IsNullOrEmpty(_selectedEqpId))
        {
            query.Add($"eqpid={Uri.EscapeDataString(_selectedEqpId)}");
        }
        else if (!string.IsNullOrEmpty(_selectedSdwt))
        {
            query.Add($"sdwt={Uri.EscapeDataString(_selectedSdwt)}");
        }
        else
        {
            query.Add($"site={Uri.EscapeDataString(_selectedSite)}");
        }

        var queryString = string.Join("&", query);
        _equipmentList = await client.GetFromJsonAsync<List<EquipmentSpecDto>>($"api/Equipment/details?{queryString}") ?? new();
        _isLoading = false;

        _currentPage = 1;
        UpdatePagination();
    }

    private async Task<IEnumerable<string>> SearchEqpIds(string value, CancellationToken token)
    {
        await Task.Yield();
        if (string.IsNullOrEmpty(value) || value == _selectedEqpId)
        {
            return _availableEqpIds;
        }
        return _availableEqpIds.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private string FormatOperatingSystem(string os, string systemType)
    {
        if (string.IsNullOrEmpty(os)) return systemType;
        var formattedOs = os.Replace("Microsoft Windows", "Win").Replace("Professional", "Pro").Replace("Enterprise", "Ent");
        var formattedSystemType = systemType.Replace("-bit", "bit");
        return $"{formattedOs} {formattedSystemType}".Trim();
    }

    private string FormatTimezone(string timezone)
    {
        if (string.IsNullOrEmpty(timezone)) return string.Empty;
        switch (timezone)
        {
            case "Korea Standard Time": return "KST";
            case "China Standard Time": return "CST";
            case "Singapore Standard Time": return "SGT";
            default: return timezone;
        }
    }
}
