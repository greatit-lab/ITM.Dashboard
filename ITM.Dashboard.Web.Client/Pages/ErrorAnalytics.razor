@* // ITM.Dashboard.Web.Client/Pages/ErrorAnalytics.razor *@
@page "/error-analytics"
@using ITM.Dashboard.Web.Client.Models
@inject IHttpClientFactory HttpClientFactory

<PageTitle>Error Analytics</PageTitle>

<MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-2">
    <MudIcon Icon="@Icons.Material.Rounded.Warning" Size="Size.Large" />
    <MudText Typo="Typo.h4">Error 현황</MudText>
</MudStack>

<MudPaper Class="pa-4 mb-4">
    <MudGrid Spacing="2" AlignItems="AlignItems.Center">
        @* ▼▼▼ [수정] Site, SDWT 필터 추가 ▼▼▼ *@
        <MudItem xs="12" sm="6" md="2">
            <MudSelect T="string" Label="Site" Value="_selectedSite" ValueChanged="OnSiteChanged" Dense="true" Margin="Margin.Dense" Required="true" RequiredError="Site를 선택하세요.">
                @foreach (var site in _sites)
                {
                    <MudSelectItem T="string" Value="@site">@site</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6" md="2">
            <MudSelect T="string" Label="SDWT (전체)" Value="_selectedSdwt" ValueChanged="OnSdwtChanged" Disabled="@(string.IsNullOrEmpty(_selectedSite))" Dense="true" Margin="Margin.Dense" Clearable="true">
                @foreach (var sdwt in _sdwts)
                {
                    <MudSelectItem T="string" Value="@sdwt">@sdwt</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="12" md="3">
            <MudAutocomplete T="string" Label="EQP ID (전체)" Value="_selectedEqpId" ValueChanged="OnEqpidChanged" SearchFunc="SearchEqpids"
                             ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="false" Dense="true" Margin="Margin.Dense"
                             Disabled="@(string.IsNullOrEmpty(_selectedSite))" />
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudDateRangePicker @bind-DateRange="_dateRange" Label="기간 선택" Dense="true" Margin="Margin.Dense" />
        </MudItem>
        <MudItem xs="12" sm="6" md="2">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnSearchClicked" Disabled="@(string.IsNullOrEmpty(_selectedSite))" FullWidth="true">조회</MudButton>
        </MudItem>
    </MudGrid>
</MudPaper>

@if (_initialLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (_isSearched)
{
    <MudGrid Spacing="3">
        @* KPI Cards *@
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Style="height:100%"><MudText Typo="Typo.subtitle1">Total Error 발생건</MudText><MudText Typo="Typo.h4" Color="Color.Error">@_summary?.TotalErrorCount</MudText></MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Style="height:100%"><MudText Typo="Typo.subtitle1">Error 발생 장비수</MudText><MudText Typo="Typo.h4">@_summary?.ErrorEqpCount</MudText></MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="6">
            <MudPaper Class="pa-4" Style="height:100%"><MudText Typo="Typo.subtitle1">최다 발생 Error</MudText><MudText Typo="Typo.h4">@_summary?.TopErrorId (@_summary?.TopErrorCount 건)</MudText></MudPaper>
        </MudItem>

        @* Charts *@
        <MudItem xs="12" md="8">
            <MudPaper Class="pa-4" Style="height:100%">
                <MudText Typo="Typo.h6" GutterBottom="true">Error 발생 Time Trend</MudText>
                <MudChart ChartType="ChartType.Bar" ChartSeries="_trendSeries" XAxisLabels="_trendXAxisLabels" Height="300px" />
            </MudPaper>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudPaper Class="pa-4" Style="height:100%">
                <MudText Typo="Typo.h6" GutterBottom="true">장비별 에러 발생 현황</MudText>
                @if (_donutChartInput.Any())
                {
                    <MudChart ChartType="ChartType.Donut" InputData="@_donutChartInput" InputLabels="@_donutChartLabels" Height="300px" />
                }
                else
                {
                    <MudText>데이터 없음</MudText>
                }
            </MudPaper>
        </MudItem>

        @* Data Grid *@
        <MudItem xs="12">
            @* [수정] 서버사이드 페이징을 위해 MudDataGrid 사용 *@
            <MudDataGrid T="ErrorLogDto" ServerData="LoadGridData" @ref="_grid" Dense="true" Hover="true" Striped="true" RowsPerPage="10">
                <Columns>
                    <PropertyColumn Property="x => x.TimeStamp" Title="Error Time" Format="yy-MM-dd HH:mm:ss" />
                    <PropertyColumn Property="x => x.EqpId" Title="EQP ID" />
                    <PropertyColumn Property="x => x.ErrorId" Title="Error ID" />
                    <PropertyColumn Property="x => x.ErrorLabel" Title="Error Label" />
                    <PropertyColumn Property="x => x.ErrorDesc" Title="Error Description" />
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="ErrorLogDto" />
                </PagerContent>
            </MudDataGrid>
        </MudItem>
    </MudGrid>
}
else
{
    <MudAlert Severity="Severity.Info">조회할 Site를 선택 후, 조회 버튼을 클릭하세요.</MudAlert>
}

@code {
    private bool _initialLoading = true;
    private bool _isSearched = false;
    private MudDataGrid<ErrorLogDto> _grid;

    private DateRange _dateRange = new DateRange(DateTime.Now.Date.AddDays(-6), DateTime.Now.Date);

    private List<string> _sites = new();
    private List<string> _sdwts = new();
    private List<string> _eqpIds = new();

    private string _selectedSite;
    private string _selectedSdwt;
    private string _selectedEqpId;

    private ErrorAnalyticsSummaryDto _summary;
    private List<ErrorTrendDataPointDto> _trendData = new();

    private List<ChartSeries> _trendSeries = new();
    private string[] _trendXAxisLabels = Array.Empty<string>();
    private double[] _donutChartInput = Array.Empty<double>();
    private string[] _donutChartLabels = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        await LoadSites();
        _initialLoading = false;
    }

    private async Task LoadSites()
    {
        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        _sites = await client.GetFromJsonAsync<List<string>>("api/Filters/sites") ?? new();
    }

    private async Task OnSiteChanged(string newSite)
    {
        _selectedSite = newSite;
        _selectedSdwt = null;
        _selectedEqpId = null;
        _sdwts.Clear();
        _eqpIds.Clear();
        if (!string.IsNullOrEmpty(_selectedSite))
        {
            var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
            _sdwts = await client.GetFromJsonAsync<List<string>>($"api/Filters/sdwts/{_selectedSite}") ?? new();
        }
    }

    private async Task OnSdwtChanged(string newSdwt)
    {
        _selectedSdwt = newSdwt;
        _selectedEqpId = null;
        _eqpIds.Clear();
        if (!string.IsNullOrEmpty(_selectedSite))
        {
            var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
            var url = string.IsNullOrEmpty(_selectedSdwt)
                ? $"api/Filters/eqpidsbysite/{_selectedSite}" // Site 내 전체 EQPID (API 추가 필요)
                : $"api/Filters/eqpids/{_selectedSdwt}";

            // 임시로 SDWT 기준만 사용
            if (!string.IsNullOrEmpty(_selectedSdwt))
            {
                _eqpIds = await client.GetFromJsonAsync<List<string>>(url) ?? new();
            }
        }
    }

    private void OnEqpidChanged(string eqpid) => _selectedEqpId = eqpid;

    private async Task<IEnumerable<string>> SearchEqpids(string value, CancellationToken token)
    {
        await Task.Yield();
        if (string.IsNullOrEmpty(value)) return _eqpIds;
        return _eqpIds.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task OnSearchClicked()
    {
        _initialLoading = true;
        _isSearched = true;
        StateHasChanged();

        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        var query = BuildQueryString();

        try
        {
            var summaryTask = client.GetFromJsonAsync<ErrorAnalyticsSummaryDto>($"api/ErrorAnalytics/summary?{query}");
            var trendTask = client.GetFromJsonAsync<List<ErrorTrendDataPointDto>>($"api/ErrorAnalytics/trend?{query}");

            await Task.WhenAll(summaryTask, trendTask);

            _summary = await summaryTask;
            _trendData = await trendTask;

            PrepareChartData();
            await _grid.ReloadServerData(); // 데이터 그리드 갱신
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading analytics data: {ex.Message}");
        }
        finally
        {
            _initialLoading = false;
            StateHasChanged();
        }
    }

    private async Task<GridData<ErrorLogDto>> LoadGridData(GridState<ErrorLogDto> state)
    {
        if (!_isSearched)
            return new GridData<ErrorLogDto> { Items = new List<ErrorLogDto>(), TotalItems = 0 };

        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        var query = BuildQueryString();
        var dataUrl = $"api/ErrorAnalytics/logs?{query}&page={state.Page}&pageSize={state.PageSize}";

        try
        {
            // GetFromJsonAsync를 사용하여 PagedResult<T>로 직접 변환
            var pagedResult = await client.GetFromJsonAsync<PagedResult<ErrorLogDto>>(dataUrl);

            if (pagedResult != null)
            {
                return new GridData<ErrorLogDto>
                {
                    Items = pagedResult.Items,
                    TotalItems = (int)pagedResult.TotalItems
                };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading grid data: {ex.Message}");
        }

        return new GridData<ErrorLogDto> { Items = new List<ErrorLogDto>(), TotalItems = 0 };
    }

    private string BuildQueryString()
    {
        var startDate = _dateRange.Start?.ToString("o") ?? "";
        var endDate = _dateRange.End?.ToString("o") ?? "";

        var queryParams = new System.Text.StringBuilder();
        queryParams.Append($"startDate={Uri.EscapeDataString(startDate)}");
        queryParams.Append($"&endDate={Uri.EscapeDataString(endDate)}");

        if (!string.IsNullOrEmpty(_selectedSite)) queryParams.Append($"&site={Uri.EscapeDataString(_selectedSite)}");
        if (!string.IsNullOrEmpty(_selectedSdwt)) queryParams.Append($"&sdwt={Uri.EscapeDataString(_selectedSdwt)}");

        var eqpids = new List<string>();
        if (!string.IsNullOrEmpty(_selectedEqpId)) eqpids.Add(_selectedEqpId);
        if (eqpids.Any())
        {
            foreach (var id in eqpids)
            {
                queryParams.Append($"&eqpids={Uri.EscapeDataString(id)}");
            }
        }

        return queryParams.ToString();
    }

    private void PrepareChartData()
    {
        _trendSeries = new List<ChartSeries>
        {
            new ChartSeries { Name = "에러 건수", Data = _trendData.Select(d => (double)d.Count).ToArray() }
        };
        _trendXAxisLabels = _trendData.Select(d => d.Date.ToString("MM-dd")).ToArray();

        if (_summary?.ErrorCountByEqp != null)
        {
            _donutChartInput = _summary.ErrorCountByEqp.Select(d => d.Value).ToArray();
            _donutChartLabels = _summary.ErrorCountByEqp.Select(d => d.Label).ToArray();
        }
    }
}
