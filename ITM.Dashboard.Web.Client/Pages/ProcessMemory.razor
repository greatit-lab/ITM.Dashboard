@* ITM.Dashboard.Web.Client/Pages/ProcessMemory.razor *@

@page "/process-memory"
@using ITM.Dashboard.Web.Client.Models
@using ITM.Dashboard.Web.Client.Shared
@inject IHttpClientFactory HttpClientFactory
@inject ISnackbar Snackbar

<PageTitle>Process Performance</PageTitle>

<MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-2">
    <MudIcon Icon="@Icons.Material.Rounded.Memory" Size="Size.Large" />
    <MudText Typo="Typo.h4">Process Memory</MudText>
</MudStack>

<MudPaper Class="pa-4 mb-4">
    <MudGrid Spacing="2" AlignItems="AlignItems.Center">
        <MudItem xs="12" sm="4" md="2">
            <MudSelect T="string" Label="Site" Value="_selectedSite" ValueChanged="OnSiteChanged" Dense="true" Margin="Margin.Dense" Required="true">
                @foreach (var site in _sites)
                {
                    <MudSelectItem T="string" Value="@site">@site</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="4" md="2">
            <MudSelect T="string" Label="SDWT" Value="_selectedSdwt" ValueChanged="OnSdwtChanged" Disabled="@(string.IsNullOrEmpty(_selectedSite))" Dense="true" Margin="Margin.Dense" Required="true">
                @foreach (var sdwt in _sdwts)
                {
                    <MudSelectItem T="string" Value="@sdwt">@sdwt</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="4" md="2">
            <MudAutocomplete T="string" Label="EQP ID" @bind-Value="_selectedEqpId" SearchFunc="SearchEqpids"
                             ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="false" Dense="true" Margin="Margin.Dense"
                             Required="true" Disabled="@(string.IsNullOrEmpty(_selectedSdwt))" />
        </MudItem>
        <MudItem xs="6" sm="6" md="2">
            <MudDatePicker Label="Start Date" @bind-Date="_startDate" Dense="true" Margin="Margin.Dense" />
        </MudItem>
        <MudItem xs="6" sm="6" md="2">
            <MudDatePicker Label="End Date" @bind-Date="_endDate" Dense="true" Margin="Margin.Dense" />
        </MudItem>
        <MudItem xs="6" sm="6" md="1">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnSearchClicked" Disabled="@(string.IsNullOrEmpty(_selectedEqpId))" FullWidth="true">Search</MudButton>
        </MudItem>
        <MudItem xs="6" sm="6" md="1">
            <MudButton Variant="Variant.Outlined" OnClick="ResetFilters" FullWidth="true">Reset</MudButton>
        </MudItem>
    </MudGrid>
</MudPaper>

@if (_isLoading)
{
    <div class="d-flex justify-center mt-16">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </div>
}
else if (_isSearched)
{
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h6" GutterBottom="true">Process Memory Usage (Top 5 by Peak)</MudText>
        @if (_processChartData.Any())
        {
            <AmChart ChartData="_processChartData" ChartConfig="_processMemoryChartConfig" ChartType="ProcessMemoryChart" Height="500px" />
        }
        else
        {
            <div class="d-flex justify-center align-center" style="height:500px;"><MudText>조회된 기간 내에 프로세스 성능 데이터가 없습니다.</MudText></div>
        }
    </MudPaper>
}
else
{
    <MudAlert Severity="Severity.Info">조회할 장비를 선택 후, Search 버튼을 클릭하세요.</MudAlert>
}


@code {
    private bool _isLoading = false;
    private bool _isSearched = false;

    private string? _selectedSite;
    private string? _selectedSdwt;
    private string? _selectedEqpId;
    private DateTime? _startDate = DateTime.Now.Date.AddDays(-1);
    private DateTime? _endDate = DateTime.Now.Date;

    private List<string> _sites = new();
    private List<string> _sdwts = new();
    private List<string> _availableEqpIds = new();

    private List<ProcessPerformanceDataDto> _processChartData = new();
    private object _processMemoryChartConfig = new { };

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        _sites = await client.GetFromJsonAsync<List<string>>("api/Filters/sites") ?? new();
    }

    private async Task OnSiteChanged(string newSite)
    {
        _selectedSite = newSite;
        await ResetDependentFilters("site");
    }

    private async Task OnSdwtChanged(string newSdwt)
    {
        _selectedSdwt = newSdwt;
        await ResetDependentFilters("sdwt");
    }

    private async Task ResetDependentFilters(string level)
    {
        if (level == "site")
        {
            _selectedSdwt = null;
            _sdwts.Clear();
        }
        _selectedEqpId = null;
        _availableEqpIds.Clear();

        if (string.IsNullOrEmpty(_selectedSite)) return;

        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        if (level == "site")
        {
            _sdwts = await client.GetFromJsonAsync<List<string>>($"api/Filters/sdwts/{_selectedSite}") ?? new();
        }
        
        // EQP ID 목록 조회 URL은 eqp_perf 테이블을 사용하는 API로 지정합니다.
        // eqp_proc_perf 데이터가 있는 장비는 eqp_perf 데이터도 있을 가능성이 높기 때문입니다.
        if (!string.IsNullOrEmpty(_selectedSdwt))
        {
            _availableEqpIds = await client.GetFromJsonAsync<List<string>>($"api/Filters/eqpids/performance/{_selectedSdwt}") ?? new();
        }
        
        StateHasChanged();
    }

    private async Task<IEnumerable<string>> SearchEqpids(string value, CancellationToken token)
    {
        await Task.Yield();
        if (string.IsNullOrEmpty(value) || value == _selectedEqpId)
        {
            return _availableEqpIds;
        }
        return _availableEqpIds.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task OnSearchClicked()
    {
        if (string.IsNullOrEmpty(_selectedEqpId) || _startDate == null || _endDate == null) return;
        _isLoading = true;
        _isSearched = false;
        _processChartData.Clear();
        await InvokeAsync(StateHasChanged);

        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        try
        {
            // ▼▼▼ [수정] API에 날짜를 ISO 8601 형식("o")으로 전달하도록 변경 ▼▼▼
            var query = new System.Text.StringBuilder();
            query.Append($"startDate={Uri.EscapeDataString(_startDate.Value.ToString("o"))}");
            query.Append($"&endDate={Uri.EscapeDataString(_endDate.Value.AddDays(1).AddTicks(-1).ToString("o"))}");
            query.Append($"&eqpid={Uri.EscapeDataString(_selectedEqpId)}");

            var data = await client.GetFromJsonAsync<List<ProcessPerformanceDataDto>>($"api/PerformanceAnalytics/process-history?{query}");
            
            if (data != null && data.Any())
            {
                // 메모리 사용량이 높은 상위 5개 프로세스만 필터링
                var top5ProcessNames = data
                    .GroupBy(d => d.ProcessName)
                    .Select(g => new { ProcessName = g.Key, MaxMem = g.Max(d => d.MemoryUsageMB) })
                    .OrderByDescending(x => x.MaxMem)
                    .Take(5)
                    .Select(x => x.ProcessName)
                    .ToHashSet();

                _processChartData = data.Where(d => top5ProcessNames.Contains(d.ProcessName)).ToList();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"프로세스 데이터 조회 중 오류 발생: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSearched = true;
            _isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ResetFilters()
    {
        _selectedSite = null;
        _selectedSdwt = null;
        _selectedEqpId = null;
        _startDate = DateTime.Now.Date.AddDays(-1);
        _endDate = DateTime.Now.Date;
        _sdwts.Clear();
        _availableEqpIds.Clear();

        _isSearched = false;
        _processChartData.Clear();
        await InvokeAsync(StateHasChanged);
    }
}
