@* // ITM.Dashboard.Web.Client/Pages/PerformanceTrend.razor *@
@page "/performance-trend"
@using ITM.Dashboard.Web.Client.Models
@using ITM.Dashboard.Web.Client.Shared
@inject IHttpClientFactory HttpClientFactory
@inject ISnackbar Snackbar

@implements IAsyncDisposable

<PageTitle>Performance Trend</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">장비 성능 트렌드 분석</MudText>

<MudPaper Class="pa-4 mb-4">
    <MudGrid Spacing="2" AlignItems="AlignItems.Center">
        <!-- Site -->
        <MudItem xs="12" sm="4" md="1">
            <MudSelect T="string" Label="Site"
                       Value="_selectedSite" ValueChanged="OnSiteChanged"
                       Dense="true" Margin="Margin.Dense" Variant="Variant.Text"
                       Disabled="@(_filterState == FilterState.RealTime)">
                @foreach (var site in _sites)
                {
                    <MudSelectItem T="string" Value="@site">@site</MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <!-- SDWT -->
        <MudItem xs="12" sm="4" md="2">
            <MudSelect T="string" Label="SDWT"
                       Value="_selectedSdwt" ValueChanged="OnSdwtChanged"
                       Dense="true" Margin="Margin.Dense" Variant="Variant.Text"
                       Disabled="@(_filterState < FilterState.SelectSdwt || _filterState == FilterState.RealTime)">
                @foreach (var sdwt in _sdwts)
                {
                    <MudSelectItem T="string" Value="@sdwt">@sdwt</MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <!-- EQP ID -->
        <MudItem xs="12" sm="4" md="2">
            <MudAutocomplete @ref="_eqpIdAutocomplete" T="string" Label="EQP ID"
                             Value="_selectedEqpId" ValueChanged="OnSelectedEqpIdChanged"
                             SearchFunc="SearchEqpids"
                             Dense="true" Margin="Margin.Dense" Variant="Variant.Text"
                             ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="false"
                             Disabled="@(_filterState < FilterState.SelectEqpId || _filterState == FilterState.RealTime)" />
        </MudItem>

        <!-- Start Date -->
        <MudItem xs="6" sm="6" md="2">
            <MudDatePicker Label="Start Date" @bind-Date="_startDate"
                           Dense="true" Margin="Margin.Dense" Variant="Variant.Text"
                           Disabled="@(_filterState < FilterState.ReadyToSearch || _filterState == FilterState.RealTime)" />
        </MudItem>

        <!-- End Date -->
        <MudItem xs="6" sm="6" md="2">
            <MudDatePicker Label="End Date" @bind-Date="_endDate"
                           Dense="true" Margin="Margin.Dense" Variant="Variant.Text"
                           Disabled="@(_filterState < FilterState.ReadyToSearch || _filterState == FilterState.RealTime)" />
        </MudItem>

        <!-- 조회 버튼 -->
        <MudItem xs="4" sm="3" md="1">
            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                       OnClick="OnSearchClicked" FullWidth="true"
                       Disabled="@(_filterState < FilterState.ReadyToSearch || _filterState == FilterState.RealTime)">
                조회
            </MudButton>
        </MudItem>

        <!-- Reset 버튼 -->
        <MudItem xs="4" sm="3" md="1">
            <MudButton Variant="Variant.Outlined" OnClick="ResetFilters" FullWidth="true">
                Reset
            </MudButton>
        </MudItem>

        <!-- 실시간 데이터간격 -->
        <MudItem xs="12" sm="3" md="1">
            <MudSelect T="int" Label="실시간 데이터간격"
                       Value="_selectedIntervalSeconds" ValueChanged="OnIntervalChanged"
                       Dense="true" Margin="Margin.Dense" Variant="Variant.Text"
                       Disabled="@(_filterState < FilterState.Searched)">
                <MudSelectItem T="int" Value="0">미지정</MudSelectItem>
                <MudSelectItem T="int" Value="10">10초</MudSelectItem>
                <MudSelectItem T="int" Value="60">1분</MudSelectItem>
                <MudSelectItem T="int" Value="300">5분</MudSelectItem>
            </MudSelect>
        </MudItem>
    </MudGrid>
</MudPaper>

@if (_isSearched)
{
    <MudGrid Spacing="3">
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4" Style="height:450px; position:relative;">
                <MudText Typo="Typo.h6" GutterBottom="true">@_selectedEqpId CPU 성능 트렌드</MudText>
                @if (_isLoading)
                {
                    <div class="d-flex justify-center align-center" style="height:calc(100% - 40px);">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    </div>
                }
                else if (_chartData.Any())
                {
                    <AmChart ChartData="_chartData" ChartConfig="_cpuChartConfig" Height="400px" />
                }
                else
                {
                    <div class="d-flex justify-center align-center" style="height:400px;">
                        <MudText>데이터가 없습니다.</MudText>
                    </div>
                }
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4" Style="height:450px; position:relative;">
                <MudText Typo="Typo.h6" GutterBottom="true">@_selectedEqpId Memory 성능 트렌드</MudText>
                @if (_isLoading)
                {
                    <div class="d-flex justify-center align-center" style="height:calc(100% - 40px);">
                        <MudProgressCircular Color="Color.Info" Indeterminate="true" />
                    </div>
                }
                else if (_chartData.Any())
                {
                    <AmChart ChartData="_chartData" ChartConfig="_memoryChartConfig" Height="400px" />
                }
                else
                {
                    <div class="d-flex justify-center align-center" style="height:400px;">
                        <MudText>데이터가 없습니다.</MudText>
                    </div>
                }
            </MudPaper>
        </MudItem>

        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6" GutterBottom="true">성능 요약</MudText>
                <MudSimpleTable Dense="true" Hover="true" Class="mt-2">
                    <thead>
                        <tr>
                            <th>EQP ID</th>
                            <th style="text-align:right">CPU Avg (%)</th>
                            <th style="text-align:right">CPU Max (%)</th>
                            <th style="text-align:right">Memory Avg (%)</th>
                            <th style="text-align:right">Memory Max (%)</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var summary in _summaryData)
                        {
                            <tr>
                                <td>@summary.Key</td>
                                <td style="text-align:right">@summary.Value.CpuAvg.ToString("F2")</td>
                                <td style="text-align:right">@summary.Value.CpuMax.ToString("F2")</td>
                                <td style="text-align:right">@summary.Value.MemoryAvg.ToString("F2")</td>
                                <td style="text-align:right">@summary.Value.MemoryMax.ToString("F2")</td>
                            </tr>
                        }
                    </tbody>
                </MudSimpleTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
}
else
{
    <MudAlert Severity="Severity.Info">
        조회할 장비를 선택 후, 조회 버튼을 클릭하거나 실시간 조회를 시작하세요.
    </MudAlert>
}

@code {
    private enum FilterState
    {
        Initial, SelectSdwt, SelectEqpId, ReadyToSearch, Searched, RealTime
    }
    private FilterState _filterState = FilterState.Initial;
    private bool _isLoading = false;
    private bool _isSearched = false;
    private MudAutocomplete<string> _eqpIdAutocomplete;

    private string? _selectedSite;
    private string? _selectedSdwt;
    private string? _selectedEqpId;
    private DateTime? _startDate = DateTime.Now.Date.AddDays(-1);
    private DateTime? _endDate = DateTime.Now.Date;

    private List<string> _sites = new();
    private List<string> _sdwts = new();
    private List<string> _availableEqpIds = new();

    private List<PerformanceDataPointWithEqpIdDto> _chartData = new();
    private Dictionary<string, (double CpuAvg, double CpuMax, double MemoryAvg, double MemoryMax)> _summaryData = new();

    private object _cpuChartConfig;
    private object _memoryChartConfig;
    private int _selectedIntervalSeconds = 0;
    private Timer? _timer;

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        _sites = await client.GetFromJsonAsync<List<string>>("api/Filters/sites") ?? new();

        // ▼▼▼ [수정] 차트 포인트/라인 크기 조정 및 Y축 설정 추가 ▼▼▼
        _cpuChartConfig = new
        {
            xField = "timestamp",
            xTimeUnit = "minute",
            xAxisDateFormat = "MM-dd HH:mm",
            yAxes = new object[] { new { min = 0, max = 100 } }, // Y축 범위를 0-100으로 고정
            series = new[]
            {
                new { name = "CPU", valueField = "cpuUsage", seriesType = "line", color = "#33b2ff", 
                      bulletRadius = 1, strokeWidth = 1 } // 포인트/라인 크기
            }
        };

        _memoryChartConfig = new
        {
            xField = "timestamp",
            xTimeUnit = "minute",
            xAxisDateFormat = "MM-dd HH:mm",
            yAxes = new object[] { new { min = 0, max = 100 } }, // Y축 범위를 0-100으로 고정
            series = new[]
            {
                new { name = "Memory", valueField = "memoryUsage", seriesType = "line", color = "#39e6a3", 
                      bulletRadius = 1, strokeWidth = 1 } // 포인트/라인 크기
            }
        };
    }

    private async Task OnSiteChanged(string site)
    {
        _selectedSite = site;
        _selectedSdwt = null;
        _selectedEqpId = null;
        _sdwts.Clear();
        _availableEqpIds.Clear();

        if (string.IsNullOrEmpty(site))
        {
            _filterState = FilterState.Initial;
        }
        else
        {
            var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
            _sdwts = await client.GetFromJsonAsync<List<string>>($"api/Filters/sdwts/{site}") ?? new();
            _filterState = FilterState.SelectSdwt;
        }
        StateHasChanged();
    }

    private async Task OnSdwtChanged(string sdwt)
    {
        _selectedSdwt = sdwt;
        _selectedEqpId = null;
        _availableEqpIds.Clear();

        if (string.IsNullOrEmpty(sdwt))
        {
            _filterState = FilterState.SelectSdwt;
        }
        else
        {
            var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
            _availableEqpIds = await client.GetFromJsonAsync<List<string>>($"api/Filters/eqpids/{sdwt}") ?? new();
            _filterState = FilterState.SelectEqpId;
        }
        StateHasChanged();
    }

    private Task OnSelectedEqpIdChanged(string eqpid)
    {
        _selectedEqpId = eqpid;
        _filterState = string.IsNullOrEmpty(eqpid) ? FilterState.SelectEqpId : FilterState.ReadyToSearch;
        StateHasChanged();
        return Task.CompletedTask;
    }

    // ▼▼▼ [수정] 조회 버튼 클릭 시 UI 즉시 반응하도록 로직 변경 ▼▼▼
    private async Task OnSearchClicked()
    {
        if (string.IsNullOrEmpty(_selectedEqpId)) return;

        _isLoading = true;
        _isSearched = true;
        ClearResults();
        StateHasChanged();
        await Task.Delay(1); // Blazor가 UI를 업데이트(로딩 아이콘 표시)할 시간을 줍니다.

        await UpdateChartDataAsync();

        _isLoading = false;
        _filterState = FilterState.Searched;
        StateHasChanged();
    }

    private async Task OnIntervalChanged(int interval)
    {
        _selectedIntervalSeconds = interval;
        if (interval > 0)
        {
            _filterState = FilterState.RealTime;
            await StartTimerAsync();
        }
        else
        {
            _filterState = FilterState.Searched;
            await StopTimerAsync();
        }
        StateHasChanged();
    }

    private async Task ResetFilters()
    {
        _selectedSite = _selectedSdwt = _selectedEqpId = null;
        _startDate = DateTime.Now.Date.AddDays(-1);
        _endDate = DateTime.Now.Date;

        _sdwts.Clear();
        _availableEqpIds.Clear();
        if (_eqpIdAutocomplete != null)
            await _eqpIdAutocomplete.ResetAsync();
        ClearResults();
        _isSearched = false;
        await StopTimerAsync();

        _selectedIntervalSeconds = 0;
        _filterState = FilterState.Initial;
        StateHasChanged();
    }

    private async Task StartTimerAsync()
    {
        if (string.IsNullOrEmpty(_selectedEqpId)) return;
        await StopTimerAsync();
        _isSearched = true;

        var interval = TimeSpan.FromSeconds(_selectedIntervalSeconds);
        _timer = new Timer(async _ => await UpdateChartDataAsync(), null, TimeSpan.Zero, interval);
    }

    private async Task StopTimerAsync()
    {
        if (_timer != null)
        {
            await _timer.DisposeAsync();
            _timer = null;
        }
    }

    // ▼▼▼ [수정] 데이터 조회 시 기간에 따라 집계 단위를 동적으로 조절하는 로직 추가 ▼▼▼
    private async Task UpdateChartDataAsync()
    {
        if (string.IsNullOrEmpty(_selectedEqpId)) return;
        try
        {
            DateTime start, end;
            int intervalToUse = _selectedIntervalSeconds;

            if (_filterState == FilterState.RealTime && intervalToUse > 0)
            {
                end = DateTime.Now;
                start = end.AddHours(-1);
            }
            else
            {
                start = _startDate ?? DateTime.Now.Date.AddDays(-1);
                end = (_endDate ?? DateTime.Now.Date).AddDays(1);

                // 기간에 따른 동적 집계 간격 설정 (성능 최적화)
                var dateDiffDays = (end - start).TotalDays;
                if (dateDiffDays > 30) intervalToUse = 3600; // 1시간
                else if (dateDiffDays > 7) intervalToUse = 1800; // 30분
                else intervalToUse = 300; // 5분 (기본값)
            }

            var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
            var query = new System.Text.StringBuilder();
            query.Append($"startDate={Uri.EscapeDataString(start.ToString("o"))}");
            query.Append($"&endDate={Uri.EscapeDataString(end.ToString("o"))}");
            query.Append($"&intervalSeconds={intervalToUse}"); // 계산된 간격 사용
            query.Append($"&eqpids={Uri.EscapeDataString(_selectedEqpId)}");

            var data = await client.GetFromJsonAsync<List<PerformanceDataPointWithEqpIdDto>>(
                $"api/PerformanceAnalytics/history?{query}");
            if (data != null && data.Any())
            {
                _chartData = data;
                CalculateSummary(data);
            }
            else
                ClearResults();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"데이터 조회 중 오류 발생: {ex.Message}", Severity.Error);
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private void CalculateSummary(List<PerformanceDataPointWithEqpIdDto> data)
    {
        _summaryData.Clear();
        foreach (var group in data.GroupBy(d => d.EqpId))
        {
            _summaryData[group.Key] = (
                group.Average(d => d.CpuUsage),
                group.Max(d => d.CpuUsage),
                group.Average(d => d.MemoryUsage),
                group.Max(d => d.MemoryUsage)
            );
        }
    }

    private void ClearResults()
    {
        _chartData.Clear();
        _summaryData.Clear();
    }

    public async ValueTask DisposeAsync()
    {
        if (_timer != null)
            await _timer.DisposeAsync();
    }

    private async Task<IEnumerable<string>> SearchEqpids(string value, CancellationToken token)
    {
        await Task.Yield();
        if (string.IsNullOrEmpty(value))
            return _availableEqpIds.Take(10);

        return _availableEqpIds.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
