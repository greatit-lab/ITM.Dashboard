@* // ITM.Dashboard.Web.Client/Pages/PerformanceTrend.razor *@

@page "/performance-trend"
@using ITM.Dashboard.Web.Client.Models
@using ITM.Dashboard.Web.Client.Shared
@inject IHttpClientFactory HttpClientFactory
@inject ISnackbar Snackbar
@implements IAsyncDisposable

<PageTitle>Performance</PageTitle>

<MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-2">
    <MudIcon Icon="@Icons.Material.Rounded.Insights" Size="Size.Large" />
    <MudText Typo="Typo.h4">Performance</MudText>
</MudStack>

<MudPaper Class="pa-4 mb-4">
    <MudGrid Spacing="2" AlignItems="AlignItems.Center">
        <MudItem xs="12" sm="4" md="1">
            <MudSelect T="string" Label="Site" Value="_selectedSite" ValueChanged="OnSiteChanged"
                       Dense="true" Margin="Margin.Dense" Variant="Variant.Text"
                       Disabled="@(_filterState == FilterState.RealTime)">
                @foreach (var site in _sites)
                {
                    <MudSelectItem T="string" Value="@site">@site</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="4" md="2">
            <MudSelect T="string" Label="SDWT" Value="_selectedSdwt" ValueChanged="OnSdwtChanged"
                       Dense="true" Margin="Margin.Dense" Variant="Variant.Text"
                       Disabled="@(_filterState < FilterState.SelectSdwt || _filterState == FilterState.RealTime)">
                @foreach (var sdwt in _sdwts)
                {
                    <MudSelectItem T="string" Value="@sdwt">@sdwt</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="4" md="2">
            <MudAutocomplete @ref="_eqpIdAutocomplete" T="string" Label="EQP ID"
                             Value="_selectedEqpId" ValueChanged="OnSelectedEqpIdChanged"
                             SearchFunc="SearchEqpids"
                             Dense="true" Margin="Margin.Dense" Variant="Variant.Text"
                             ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="false"
                             Disabled="@(_filterState < FilterState.SelectEqpId || _filterState == FilterState.RealTime)" />
        </MudItem>

        @* ▼▼▼ [수정] DateRangePicker를 Start/End Date, Start/End Time 필드로 분리합니다. ▼▼▼ *@
        <MudItem xs="6" sm="3" md="1">
            <MudDatePicker Label="Start Date" @bind-Date="_startDate" Dense="true" Margin="Margin.Dense"
                           Disabled="@(_filterState < FilterState.ReadyToSearch || _filterState == FilterState.RealTime)" />
        </MudItem>
        <MudItem xs="6" sm="3" md="1">
            <MudTimePicker Label="Start Time" @bind-Time="_startTime" TimeEditMode="TimeEditMode.OnlyHours" AmPm="false" Dense="true" Margin="Margin.Dense"
                           Disabled="@(_filterState < FilterState.ReadyToSearch || _filterState == FilterState.RealTime)" />
        </MudItem>
        <MudItem xs="6" sm="3" md="1">
            <MudDatePicker Label="End Date" @bind-Date="_endDate" Dense="true" Margin="Margin.Dense"
                           Disabled="@(_filterState < FilterState.ReadyToSearch || _filterState == FilterState.RealTime)" />
        </MudItem>
        <MudItem xs="6" sm="3" md="1">
            <MudTimePicker Label="End Time" @bind-Time="_endTime" TimeEditMode="TimeEditMode.OnlyHours" AmPm="false" Dense="true" Margin="Margin.Dense"
                           Disabled="@(_filterState < FilterState.ReadyToSearch || _filterState == FilterState.RealTime)" />
        </MudItem>
        @* ▲▲▲ [수정] 여기까지 ▲▲▲ *@


        <MudItem xs="4" sm="3" md="1">
            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                       OnClick="OnSearchClicked" FullWidth="true"
                       Disabled="@(_filterState < FilterState.ReadyToSearch || _filterState == FilterState.RealTime)">
                SEARCH
            </MudButton>
        </MudItem>
        <MudItem xs="4" sm="3" md="1">
            <MudButton Variant="Variant.Outlined" OnClick="ResetFilters" FullWidth="true">
                Reset
            </MudButton>
        </MudItem>
        <MudItem xs="12" sm="3" md="1">
            <MudSelect T="int" Label="Real Interval"
                       Value="_selectedIntervalSeconds" ValueChanged="OnIntervalChanged"
                       Dense="true" Margin="Margin.Dense" Variant="Variant.Text"
                       Disabled="@(_filterState < FilterState.Searched)">
                <MudSelectItem T="int" Value="0">미지정</MudSelectItem>
                <MudSelectItem T="int" Value="10">10초</MudSelectItem>
                <MudSelectItem T="int" Value="60">1분</MudSelectItem>
                <MudSelectItem T="int" Value="300">5분</MudSelectItem>
            </MudSelect>
        </MudItem>
    </MudGrid>
</MudPaper>

@if (_isSearched)
{
    <MudGrid Spacing="3">
        @* --- 좌측 열 --- *@
        <MudItem xs="12" md="6">
            <MudText Typo="Typo.h5" GutterBottom="true" Class="mb-3"><b>▶ CPU</b></MudText>
            <MudStack Spacing="3">
                @* (좌측 상단) CPU Usage Chart *@
                <MudPaper Class="pa-4" Style="height:350px; position:relative;">
                    <MudText Typo="Typo.h6" GutterBottom="true">@_selectedEqpId CPU Usage Trend</MudText>
                    @if (_isLoading)
                    {
                        <div class="d-flex justify-center align-center" style="height:calc(100% - 40px);">
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        </div>
                    }
                    else if (_chartData.Any())
                    {
                        <AmChart ChartData="_chartData" ChartConfig="_cpuUsageChartConfig" Height="300px" ChartType="PerformanceLineChart" />
                    }
                    else
                    {
                        <div class="d-flex justify-center align-center" style="height:300px;"><MudText>데이터가 없습니다.</MudText></div>
                    }
                </MudPaper>

                @* (좌측 하단) CPU Temp & Fan Speed Chart *@
                <MudPaper Class="pa-4" Style="height:350px; position:relative;">
                    <MudText Typo="Typo.h6" GutterBottom="true">@_selectedEqpId CPU Temp & Fan Speed</MudText>
                    @if (_isLoading)
                    {
                        <div class="d-flex justify-center align-center" style="height:calc(100% - 40px);">
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        </div>
                    }
                    else if (_chartData.Any())
                    {
                        <AmChart ChartData="_chartData" ChartConfig="_cpuTempFanChartConfig" Height="300px" ChartType="PerformanceLineChart" />
                    }
                    else
                    {
                        <div class="d-flex justify-center align-center" style="height:300px;"><MudText>데이터가 없습니다.</MudText></div>
                    }
                </MudPaper>
            </MudStack>
        </MudItem>

        @* --- 우측 열 --- *@
        <MudItem xs="12" md="6">
            <MudText Typo="Typo.h5" GutterBottom="true" Class="mb-3"><b>▶ Memory & GPU</b></MudText>
            <MudStack Spacing="3">
                @* (우측 상단) Memory Usage Chart *@
                <MudPaper Class="pa-4" Style="height:350px; position:relative;">
                    <MudText Typo="Typo.h6" GutterBottom="true">@_selectedEqpId Memory Usage Trend</MudText>
                    @if (_isLoading)
                    {
                        <div class="d-flex justify-center align-center" style="height:calc(100% - 40px);">
                            <MudProgressCircular Color="Color.Info" Indeterminate="true" />
                        </div>
                    }
                    else if (_chartData.Any())
                    {
                        <AmChart ChartData="_chartData" ChartConfig="_memoryUsageChartConfig" Height="300px" ChartType="PerformanceLineChart" />
                    }
                    else
                    {
                        <div class="d-flex justify-center align-center" style="height:300px;"><MudText>데이터가 없습니다.</MudText></div>
                    }
                </MudPaper>

                @* (우측 하단) GPU Temp Chart *@
                <MudPaper Class="pa-4" Style="height:350px; position:relative;">
                    <MudText Typo="Typo.h6" GutterBottom="true">@_selectedEqpId GPU Temp Trend</MudText>
                    @if (_isLoading)
                    {
                        <div class="d-flex justify-center align-center" style="height:calc(100% - 40px);">
                            <MudProgressCircular Color="Color.Info" Indeterminate="true" />
                        </div>
                    }
                    else if (_chartData.Any())
                    {
                        <AmChart ChartData="_chartData" ChartConfig="_gpuTempChartConfig" Height="300px" ChartType="PerformanceLineChart" />
                    }
                    else
                    {
                        <div class="d-flex justify-center align-center" style="height:300px;"><MudText>데이터가 없습니다.</MudText></div>
                    }
                </MudPaper>
            </MudStack>
        </MudItem>

        @* --- 하단 요약 테이블 --- *@
        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6" GutterBottom="true">Performance Summary</MudText>
                <MudSimpleTable Dense="true" Hover="true" Class="mt-2">
                    <thead>
                        <tr>
                            <th>EQP ID</th>
                            <th>CPU Peak Time</th>
                            <th>CPU Max (%)</th>
                            <th>CPU Temp (°C)</th>
                            <th>Fan Speed (RPM)</th>
                            <th>Memory Peak Time</th>
                            <th>Memory Max (%)</th>
                            <th>GPU Peak Time</th>
                            <th>GPU Temp Max (°C)</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var summary in _summaryData)
                        {
                            <tr>
                                <td>@summary.Key</td>
                                <td>@summary.Value.CpuPeakTimestamp?.ToString("yy-MM-dd HH:mm:ss")</td>
                                <td>@summary.Value.CpuMaxUsage.ToString("F2")</td>
                                <td>@summary.Value.CpuTempAtCpuPeak.ToString("F1")</td>
                                <td>@summary.Value.FanSpeedAtCpuPeak.ToString("F0")</td>
                                <td>@summary.Value.MemoryPeakTimestamp?.ToString("yy-MM-dd HH:mm:ss")</td>
                                <td>@summary.Value.MemoryMaxUsage.ToString("F2")</td>
                                <td>@summary.Value.GpuPeakTimestamp?.ToString("yy-MM-dd HH:mm:ss")</td>
                                <td>@summary.Value.GpuMaxTemp.ToString("F1")</td>
                            </tr>
                        }
                    </tbody>
                </MudSimpleTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
}
else
{
    <MudAlert Severity="Severity.Info">
        조회할 장비를 선택 후, 조회 버튼을 클릭하거나 실시간 조회를 시작하세요.
    </MudAlert>
}

@code {
    public class PerformanceSummary
    {
        public DateTime? CpuPeakTimestamp { get; set; }
        public double CpuMaxUsage { get; set; }
        public double CpuTempAtCpuPeak { get; set; }
        public double FanSpeedAtCpuPeak { get; set; }
        public DateTime? MemoryPeakTimestamp { get; set; }
        public double MemoryMaxUsage { get; set; }
        public DateTime? GpuPeakTimestamp { get; set; }
        public double GpuMaxTemp { get; set; }
    }

    private Dictionary<string, PerformanceSummary> _summaryData = new();
    private enum FilterState { Initial, SelectSdwt, SelectEqpId, ReadyToSearch, Searched, RealTime }
    private FilterState _filterState = FilterState.Initial;
    private bool _isLoading = false;
    private bool _isSearched = false;
    private MudAutocomplete<string> _eqpIdAutocomplete;
    private string? _selectedSite;
    private string? _selectedSdwt;
    private string? _selectedEqpId;

    // ▼▼▼ [수정] DateRangePicker 대신 개별 DateTime?과 TimeSpan?을 사용합니다. ▼▼▼
    private DateTime? _startDate = DateTime.Now.Date.AddDays(-1);
    private DateTime? _endDate = DateTime.Now.Date;
    private TimeSpan? _startTime = new TimeSpan(0, 0, 0);
    private TimeSpan? _endTime = new TimeSpan(23, 0, 0); // 분 단위를 0으로 설정
    // ▲▲▲ [수정] 여기까지 ▲▲▲

    private List<string> _sites = new();
    private List<string> _sdwts = new();
    private List<string> _availableEqpIds = new();
    private List<PerformanceDataPointWithEqpIdDto> _chartData = new();
    private int _selectedIntervalSeconds = 0;
    private Timer? _timer;

    private object _cpuUsageChartConfig;
    private object _cpuTempFanChartConfig;
    private object _memoryUsageChartConfig;
    private object _gpuTempChartConfig;

    // ▼▼▼ [수정] 조합된 날짜/시간을 계산하는 속성을 새로운 변수에 맞게 수정합니다. ▼▼▼
    private DateTime EffectiveStartDate => _startDate.GetValueOrDefault(DateTime.Now.Date).Date + _startTime.GetValueOrDefault(TimeSpan.Zero);
    private DateTime EffectiveEndDate => _endDate.GetValueOrDefault(DateTime.Now.Date).Date + _endTime.GetValueOrDefault(new TimeSpan(23, 0, 0));
    // ▲▲▲ [수정] 여기까지 ▲▲▲

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        _sites = await client.GetFromJsonAsync<List<string>>("api/Filters/sites") ?? new();

        _cpuUsageChartConfig = new
        {
            xField = "timestamp",
            yAxes = new object[] { new { title = "Usage (%)" } },
            series = new[] {
                new { name = "CPU", valueField = "cpuUsage", color = "#33b2ff", bulletRadius = 2, tooltipText = "{valueX.formatDate('HH:mm:ss')}:[/] [bold]{name}: {valueY.formatNumber('#.00')}%" }
            }
        };
        _cpuTempFanChartConfig = new
        {
            xField = "timestamp",
            xAxisDateFormat = "MM-dd HH:mm",
            yAxes = new object[] {
                new { title = "Temp (°C)" },
                new { opposite = true, title = "Fan (RPM)" }
             },
            series = new object[] {
                new { name = "CPU Temp", valueField = "cpuTemp", yAxisIndex = 0, color = "#ffc400", bulletRadius = 2, tooltipText = "{valueX.formatDate('HH:mm:ss')}:[/] [bold]{name}: {valueY.formatNumber('#.0')}°C" },
                new { name = "Fan Speed", valueField = "fanSpeed", yAxisIndex = 1, color = "#9e9e9e", bulletRadius = 2, tooltipText = "{valueX.formatDate('HH:mm:ss')}:[/] [bold]{name}: {valueY.formatNumber('#')} RPM" }
            }
        };
        _memoryUsageChartConfig = new
        {
            xField = "timestamp",
            yAxes = new object[] { new { title = "Usage (%)" } },
            series = new[] {
                new { name = "Memory", valueField = "memoryUsage", color = "#39e6a3", bulletRadius = 2, tooltipText = "{valueX.formatDate('HH:mm:ss')}:[/] [bold]{name}: {valueY.formatNumber('#.00')}%" }
            }
        };
        _gpuTempChartConfig = new
        {
            xField = "timestamp",
            yAxes = new object[] { new { title = "Temp (°C)" } },
            series = new[] {
                new { name = "GPU Temp", valueField = "gpuTemp", color = "#ff8c00", bulletRadius = 2, tooltipText = "{valueX.formatDate('HH:mm:ss')}:[/] [bold]{name}: {valueY.formatNumber('#.0')}°C" }
            }
        };
    }

    private async Task OnSiteChanged(string site)
    {
        _selectedSite = site;
        _selectedSdwt = null;
        _selectedEqpId = null;
        _sdwts.Clear();
        _availableEqpIds.Clear();

        if (string.IsNullOrEmpty(site))
        {
            _filterState = FilterState.Initial;
        }
        else
        {
            var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
            _sdwts = await client.GetFromJsonAsync<List<string>>($"api/Filters/sdwts/{site}") ?? new();
            _filterState = FilterState.SelectSdwt;
        }
        StateHasChanged();
    }

    private async Task OnSdwtChanged(string sdwt)
    {
        _selectedSdwt = sdwt;
        _selectedEqpId = null;
        _availableEqpIds.Clear();

        if (string.IsNullOrEmpty(sdwt))
        {
            _filterState = FilterState.SelectSdwt;
        }
        else
        {
            var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
            _availableEqpIds = await client.GetFromJsonAsync<List<string>>($"api/Filters/eqpids/performance/{sdwt}") ?? new();
            _filterState = FilterState.SelectEqpId;
        }
        StateHasChanged();
    }

    private Task OnSelectedEqpIdChanged(string eqpid)
    {
        _selectedEqpId = eqpid;
        _filterState = string.IsNullOrEmpty(eqpid) ? FilterState.SelectEqpId : FilterState.ReadyToSearch;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task OnSearchClicked()
    {
        if (string.IsNullOrEmpty(_selectedEqpId)) return;
        _isLoading = true;
        _isSearched = true;
        ClearResults();
        StateHasChanged();
        await Task.Delay(1);

        await UpdateChartDataAsync();
        _isLoading = false;
        _filterState = FilterState.Searched;
        StateHasChanged();
    }

    private async Task OnIntervalChanged(int interval)
    {
        _selectedIntervalSeconds = interval;
        if (interval > 0)
        {
            _filterState = FilterState.RealTime;
            await StartTimerAsync();
        }
        else
        {
            _filterState = FilterState.Searched;
            await StopTimerAsync();
        }
        StateHasChanged();
    }

    private async Task ResetFilters()
    {
        _selectedSite = _selectedSdwt = _selectedEqpId = null;
        // ▼▼▼ [수정] 날짜/시간 필터 초기화 로직 변경 ▼▼▼
        _startDate = DateTime.Now.Date.AddDays(-1);
        _endDate = DateTime.Now.Date;
        _startTime = new TimeSpan(0, 0, 0);
        _endTime = new TimeSpan(23, 0, 0);
        // ▲▲▲ [수정] 여기까지 ▲▲▲

        _sdwts.Clear();
        _availableEqpIds.Clear();
        if (_eqpIdAutocomplete != null)
            await _eqpIdAutocomplete.ResetAsync();
        ClearResults();
        _isSearched = false;
        await StopTimerAsync();
        _selectedIntervalSeconds = 0;
        _filterState = FilterState.Initial;
        StateHasChanged();
    }

    private async Task StartTimerAsync()
    {
        if (string.IsNullOrEmpty(_selectedEqpId)) return;
        await StopTimerAsync();
        _isSearched = true;
        var interval = TimeSpan.FromSeconds(_selectedIntervalSeconds);
        _timer = new Timer(async _ => await UpdateChartDataAsync(), null, TimeSpan.Zero, interval);
    }

    private async Task StopTimerAsync()
    {
        if (_timer != null)
        {
            await _timer.DisposeAsync();
            _timer = null;
        }
    }

    private async Task UpdateChartDataAsync()
    {
        if (string.IsNullOrEmpty(_selectedEqpId)) return;
        try
        {
            DateTime start, end;
            int intervalToUse = _selectedIntervalSeconds;
            if (_filterState == FilterState.RealTime && intervalToUse > 0)
            {
                end = DateTime.Now;
                start = end.AddHours(-1);
            }
            else
            {
                start = EffectiveStartDate;
                end = EffectiveEndDate;

                var dateDiffDays = (end - start).TotalDays;
                if (dateDiffDays <= 1) intervalToUse = 5;
                else if (dateDiffDays <= 3) intervalToUse = 10;
                else if (dateDiffDays <= 7) intervalToUse = 60;
                else if (dateDiffDays <= 30) intervalToUse = 600;
                else intervalToUse = 1800;
            }

            var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
            var query = new System.Text.StringBuilder();
            query.Append($"startDate={Uri.EscapeDataString(start.ToString("o"))}");
            query.Append($"&endDate={Uri.EscapeDataString(end.ToString("o"))}");
            query.Append($"&intervalSeconds={intervalToUse}");
            query.Append($"&eqpids={Uri.EscapeDataString(_selectedEqpId)}");
            var data = await client.GetFromJsonAsync<List<PerformanceDataPointWithEqpIdDto>>($"api/PerformanceAnalytics/history?{query}");
            if (data != null && data.Any())
            {
                _chartData = data;
                CalculateSummary(data);
            }
            else
                ClearResults();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"데이터 조회 중 오류 발생: {ex.Message}", Severity.Error);
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private void CalculateSummary(List<PerformanceDataPointWithEqpIdDto> data)
    {
        _summaryData.Clear();
        foreach (var group in data.GroupBy(d => d.EqpId))
        {
            if (!group.Any()) continue;
            var cpuPeakDataPoint = group.OrderByDescending(d => d.CpuUsage).FirstOrDefault();
            var memoryPeakDataPoint = group.OrderByDescending(d => d.MemoryUsage).FirstOrDefault();
            var gpuPeakDataPoint = group.OrderByDescending(d => d.GpuTemp).FirstOrDefault();
            var summary = new PerformanceSummary();

            if (cpuPeakDataPoint != null)
            {
                summary.CpuPeakTimestamp = cpuPeakDataPoint.Timestamp;
                summary.CpuMaxUsage = cpuPeakDataPoint.CpuUsage;
                summary.CpuTempAtCpuPeak = cpuPeakDataPoint.CpuTemp;
                summary.FanSpeedAtCpuPeak = cpuPeakDataPoint.FanSpeed;
            }

            if (memoryPeakDataPoint != null)
            {
                summary.MemoryPeakTimestamp = memoryPeakDataPoint.Timestamp;
                summary.MemoryMaxUsage = memoryPeakDataPoint.MemoryUsage;
            }

            if (gpuPeakDataPoint != null)
            {
                summary.GpuPeakTimestamp = gpuPeakDataPoint.Timestamp;
                summary.GpuMaxTemp = gpuPeakDataPoint.GpuTemp;
            }

            _summaryData[group.Key] = summary;
        }
    }

    private void ClearResults()
    {
        _chartData.Clear();
        _summaryData.Clear();
    }

    public async ValueTask DisposeAsync()
    {
        if (_timer != null)
            await _timer.DisposeAsync();
    }

    private async Task<IEnumerable<string>> SearchEqpids(string value, CancellationToken token)
    {
        await Task.Yield();
        if (string.IsNullOrEmpty(value) || value == _selectedEqpId)
            return _availableEqpIds;
        return _availableEqpIds.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
