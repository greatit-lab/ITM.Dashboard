@* // ITM.Dashboard.Web.Client/Pages/Home.razor *@
@page "/"
@using ITM.Dashboard.Web.Client.Models
@using ITM.Dashboard.Web.Client.Shared
@inject IHttpClientFactory HttpClientFactory
@inject IDialogService DialogService

<PageTitle>Agent Dashboard</PageTitle>

<MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-2">
    <MudIcon Icon="@Icons.Material.Rounded.Home" Size="Size.Large" />
    <MudText Typo="Typo.h4">Home Dashboard</MudText>
</MudStack>

<MudPaper Elevation="0" Class="pa-4 mb-4" Style="background-color: transparent;">
    <MudGrid Spacing="2" Justify="Justify.FlexStart">
        <MudItem xs="12" sm="4" md="2">
            <MudSelect T="string" Label="Site" Value="_selectedSite" ValueChanged="OnSiteChanged" Dense="true" Margin="Margin.Dense" Clearable="true" Variant="Variant.Outlined">
                @foreach (var site in _sites)
                {
                    <MudSelectItem T="string" Value="@site">@site</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="4" md="2">
            <MudSelect T="string" Label="SDWT" Value="_selectedSdwt" ValueChanged="OnSdwtChanged" Disabled="@(string.IsNullOrEmpty(_selectedSite))" Dense="true" Margin="Margin.Dense" Clearable="true" Variant="Variant.Outlined">
                @foreach (var sdwt in _sdwts)
                {
                    <MudSelectItem T="string" Value="@sdwt">@sdwt</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    </MudGrid>
</MudPaper>

@if (_loading)
{
    <MudGrid Justify="Justify.Center" Class="mt-16">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
    </MudGrid>
}
else
{
    <MudGrid Spacing="4">
        @* --- 1. 시스템 현황 요약 카드 --- *@
        <MudItem xs="12" sm="6" md="3">
            <MudPaper @onclick='() => SetActiveFilter("All")'
                      Class="@GetCardClass("All")" Style="cursor:pointer;">
                @* ▼▼▼ [수정] AlignItems.Start -> AlignItems.Center ▼▼▼ *@
                <MudStack Spacing="0" AlignItems="AlignItems.Center">
                    <MudIcon Icon="@Icons.Material.Rounded.Devices" Color="Color.Primary" Style="font-size: 48px;" />
                    <MudText Typo="Typo.body2" Class="mud-text-secondary">Total Monitoring Agent</MudText>
                </MudStack>
                <MudText Typo="Typo.h4" Class="ml-2">@_summary?.TotalEqpCount</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper @onclick='() => SetActiveFilter("Online")'
                      Class="@GetCardClass("Online")" Style="cursor:pointer;">
                @* ▼▼▼ [수정] AlignItems.Start -> AlignItems.Center ▼▼▼ *@
                <MudStack Spacing="0" AlignItems="AlignItems.Center">
                    <MudIcon Icon="@Icons.Material.Rounded.Wifi" Color="Color.Success" Style="font-size: 48px;" />
                    <MudText Typo="Typo.body2" Class="mud-text-secondary">Online Agent</MudText>
                </MudStack>
                <MudText Typo="Typo.h4" Class="ml-2">@_summary?.OnlineAgentCount</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper @onclick='() => SetActiveFilter("Offline")'
                      Class="@GetCardClass("Offline")" Style="cursor:pointer;">
                @* ▼▼▼ [수정] AlignItems.Start -> AlignItems.Center ▼▼▼ *@
                <MudStack Spacing="0" AlignItems="AlignItems.Center">
                    <MudIcon Icon="@Icons.Material.Rounded.WifiOff" Color="@((_summary?.TotalEqpCount - _summary?.OnlineAgentCount) > 0 ? Color.Error : Color.Default)" Style="font-size: 48px;" />
                    <MudText Typo="Typo.body2" Class="mud-text-secondary">Offline Agent</MudText>
                </MudStack>
                <MudText Typo="Typo.h4" Color="@((_summary?.TotalEqpCount - _summary?.OnlineAgentCount) > 0 ? Color.Error : Color.Default)" Class="ml-2">@(_summary?.TotalEqpCount - _summary?.OnlineAgentCount)</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper @onclick='() => SetActiveFilter("Alarm")'
                      Class="@GetCardClass("Alarm")" Style="cursor:pointer;">
                @* ▼▼▼ [수정] AlignItems.Start -> AlignItems.Center ▼▼▼ *@
                <MudStack Spacing="0" AlignItems="AlignItems.Center">
                    <MudIcon Icon="@Icons.Material.Rounded.ErrorOutline" Color="Color.Warning" Style="font-size: 48px;" />
                    <MudText Typo="Typo.body2" Class="mud-text-secondary">Today's Alerts</MudText>
                </MudStack>
                <MudStack Spacing="0" AlignItems="AlignItems.End">
                    <MudText Typo="Typo.h4" Class="ml-2">@_summary?.TodayErrorCount</MudText>
                    @if (_summary?.NewAlarmCount > 0)
                    {
                        <MudText Typo="Typo.body2" Color="Color.Warning">(New: @_summary.NewAlarmCount)</MudText>
                    }
                </MudStack>
            </MudPaper>
        </MudItem>

        @* --- 2. 에이전트 상태 모니터링 테이블 --- *@
        <MudItem xs="12">
            <MudTable Items="FilteredAgentStatusList" Hover="true" Dense="true" Class="mt-4">
                <HeaderContent>
                    <MudTh>Connection</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>EQP ID</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>IP Address</MudTh>
                    <MudTh>PC Name</MudTh>
                    <MudTh>Operating System(OS)</MudTh>
                    <MudTh Style="width: 150px;">CPU / Memory</MudTh>
                    <MudTh>
                        <MudTooltip Text="+: Agent Fast, -: Agent Slow" Arrow="true" Placement="Placement.Top">
                            Time Difference
                        </MudTooltip>
                    </MudTh>
                    <MudTh>Last Contact</MudTh>
                    <MudTh>Agent Ver</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Connection">
                        @if (context.IsOnline)
                        {
                            <MudChip T="object" Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Small" Variant="Variant.Outlined">Online</MudChip>
                        }
                        else
                        {
                            <MudChip T="object" Icon="@Icons.Material.Filled.Error" Color="Color.Error" Size="Size.Small" Variant="Variant.Outlined">Offline</MudChip>
                        }
                    </MudTd>
                    <MudTd DataLabel="Agent Status">
                        @if (!context.IsOnline)
                        {
                            <MudChip T="object" Icon="@Icons.Material.Filled.HelpOutline" Color="Color.Default" Size="Size.Small" Variant="Variant.Outlined">Unknown</MudChip>
                        }
                        else if (context.TodayAlarmCount > 0)
                        {
                            <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                                <MudChip T="object" Icon="@Icons.Material.Filled.Warning" Color="Color.Warning" Size="Size.Small" Variant="Variant.Outlined">Alert</MudChip>
                                <MudText Typo="Typo.caption">(@context.TodayAlarmCount)</MudText>
                            </MudStack>
                        }
                        else
                        {
                            <MudChip T="object" Icon="@Icons.Material.Filled.Shield" Color="Color.Info" Size="Size.Small" Variant="Variant.Outlined">Run</MudChip>
                        }
                    </MudTd>
                    <MudTd DataLabel="EQP ID">@context.EqpId</MudTd>
                    <MudTd DataLabel="Type">@context.Type</MudTd>
                    <MudTd DataLabel="IP Address">@context.IpAddress</MudTd>
                    <MudTd DataLabel="PC Name">@context.PcName</MudTd>
                    <MudTd DataLabel="Operating System(OS)">@FormatOperatingSystem(context.Os, context.SystemType)</MudTd>
                    <MudTd DataLabel="CPU/Memory" @onclick="() => ShowChartDialog(context)" Style="cursor:pointer;">
                        <MudPaper Elevation="0" Class="d-flex align-center rounded pa-1"
                                  Style="background: var(--mud-palette-background-grey);
                            position: relative;">
                            <MudProgressLinear Color="Color.Primary" Value="@context.CpuUsage" Class="rounded" Style="height:8px;" />
                        </MudPaper>
                        <MudPaper Elevation="0" Class="d-flex align-center rounded pa-1 mt-1"
                                  Style="background: var(--mud-palette-background-grey);
                            position: relative;">
                            <MudProgressLinear Color="Color.Info" Value="@context.MemoryUsage" Class="rounded" Style="height:8px;" />
                        </MudPaper>
                    </MudTd>
                    <MudTd DataLabel="Time Difference">
                        <MudText Typo="Typo.body2" Color="@GetClockDriftColor(context.ClockDrift)">
                            @FormatTimeDifference(context.ClockDrift)
                        </MudText>
                    </MudTd>
                    <MudTd DataLabel="Last Contact">@context.LastContact?.ToString("yy-MM-dd HH:mm:ss")</MudTd>
                    <MudTd DataLabel="Agent Ver'">@context.AppVersion</MudTd>
                </RowTemplate>
                <PagerContent>
                    @* ▼▼▼ [수정] PageSizeOptions를 추가하여 페이지당 행 수 옵션을 변경합니다. ▼▼▼ *@
                    <MudTablePager PageSizeOptions="new int[] { 15, 30, 50 }" />
                </PagerContent>
                <NoRecordsContent>
                    <MudText>조회된 에이전트 정보가 없습니다.</MudText>
                </NoRecordsContent>
            </MudTable>
        </MudItem>
    </MudGrid>
}

@code {
    private bool _loading = true;
    private DashboardSummaryDto? _summary;
    private List<AgentStatusDto> _agentStatusList = new();
    private List<string> _sites = new();
    private List<string> _sdwts = new();
    private string? _selectedSite;
    private string? _selectedSdwt;

    private string _activeFilter = "All";
    private IEnumerable<AgentStatusDto> FilteredAgentStatusList => _activeFilter switch
    {
        "Online" => _agentStatusList.Where(a => a.IsOnline),
        "Offline" => _agentStatusList.Where(a => !a.IsOnline),
        "Alarm" => _agentStatusList.Where(a => a.TodayAlarmCount > 0),
        _ => _agentStatusList,
    };
    private void SetActiveFilter(string filterType)
    {
        _activeFilter = filterType;
    }

    private string GetCardClass(string filterType)
    {
        // ▼▼▼ [수정] flex-column, justify-center, align-center를
        // justify-space-between, align-center로 변경합니다.
        var baseClass = "pa-4 d-flex justify-space-between align-center";
        return _activeFilter == filterType ? $"{baseClass} active-card" : baseClass;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadSites();
        await LoadDashboardData();
    }

    private async Task LoadSites()
    {
        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        _sites = await client.GetFromJsonAsync<List<string>>("api/Filters/sites") ?? new();
    }

    private async Task OnSiteChanged(string newSite)
    {
        _selectedSite = newSite;
        _selectedSdwt = null;
        _sdwts.Clear();
        if (!string.IsNullOrEmpty(_selectedSite))
        {
            var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
            _sdwts = await client.GetFromJsonAsync<List<string>>($"api/Filters/sdwts/{_selectedSite}") ?? new();
        }
        await LoadDashboardData();
    }

    private async Task OnSdwtChanged(string newSdwt)
    {
        _selectedSdwt = newSdwt;
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        _loading = true;
        StateHasChanged();

        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        var query = new List<string>();
        if (!string.IsNullOrEmpty(_selectedSite)) query.Add($"site={Uri.EscapeDataString(_selectedSite)}");
        if (!string.IsNullOrEmpty(_selectedSdwt)) query.Add($"sdwt={Uri.EscapeDataString(_selectedSdwt)}");
        var queryString = string.Join("&", query);

        try
        {
            var summaryTask = client.GetFromJsonAsync<DashboardSummaryDto>($"api/dashboard/summary?{queryString}");
            var statusTask = client.GetFromJsonAsync<List<AgentStatusDto>>($"api/dashboard/agentstatus?{queryString}");
            await Task.WhenAll(summaryTask, statusTask);
            _summary = await summaryTask;
            _agentStatusList = (await statusTask ?? new()).OrderBy(s => s.EqpId).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"데이터 로드 실패: {ex.Message}");
            _summary = new DashboardSummaryDto();
            _agentStatusList = new List<AgentStatusDto>();
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private void ShowChartDialog(AgentStatusDto agent)
    {
        var parameters = new DialogParameters<PerformanceChartDialog>
        {
            [nameof(PerformanceChartDialog.EqpId)] = agent.EqpId
        };
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        DialogService.Show<PerformanceChartDialog>("", parameters, options);
    }

    private string FormatOperatingSystem(string os, string systemType)
    {
        if (string.IsNullOrEmpty(os)) return systemType;
        var formattedOs = os.Replace("Microsoft Windows", "Win").Replace("Professional", "Pro").Replace("Enterprise", "Ent");
        var formattedSystemType = systemType.Replace("-bit", "bit");
        return $"{formattedOs} {formattedSystemType}".Trim();
    }

    private string FormatTimezone(string timezone)
    {
        if (string.IsNullOrEmpty(timezone)) return string.Empty;
        switch (timezone)
        {
            case "Korea Standard Time": return "KST";
            case "China Standard Time": return "CST";
            case "Pacific Standard Time": return "PST";
            case "Singapore Standard Time": return "SGT";
            default: return timezone;
        }
    }

    private string FormatTimeDifference(double? seconds)
    {
        if (!seconds.HasValue) return "N/A";
        // 0.1초 미만 차이는 '정상'으로 간주
        if (Math.Abs(seconds.Value) < 0.1) return "✔︎";

        // ▼▼▼ [수정] 부호 로직 반전 ▼▼▼
        // seconds.Value (servTs - eqpTime)가 양수(+)면 Agent가 느린 것(-)
        // seconds.Value가 음수(-)면 Agent가 빠른 것(+)
        var sign = seconds.Value > 0 ? "-" : "+";
        // ▲▲▲ [수정] 완료 ▲▲▲

        var timeSpan = TimeSpan.FromSeconds(Math.Abs(seconds.Value));
        var parts = new List<string>();
        if (timeSpan.Hours > 0) parts.Add($"{timeSpan.Hours}h");
        if (timeSpan.Minutes > 0) parts.Add($"{timeSpan.Minutes}m");
        if (timeSpan.Seconds > 0 || parts.Count == 0) parts.Add($"{timeSpan.Seconds}s");

        return $"{sign} {string.Join(" ", parts)}";
    }

    // ▼▼▼ [수정] 새로운 색상 임계값(10분, 30분) 적용 ▼▼▼
    private Color GetClockDriftColor(double? seconds)
    {
        if (!seconds.HasValue) return Color.Default;

        var absDrift = Math.Abs(seconds.Value); // 절댓값(시간 차이 크기)

        if (absDrift > 1800) // 30분(1800초) 초과
        {
            return Color.Error; // 빨간색
        }
        if (absDrift > 600) // 10분(600초) 초과 (30분 이하)
        {
            return Color.Warning; // 주황색
        }

        // 10분 이내 (0.1초 미만의 "✔︎" 포함)
        return Color.Default; // 색상 없음 (기본 텍스트 색상)
    }
}
