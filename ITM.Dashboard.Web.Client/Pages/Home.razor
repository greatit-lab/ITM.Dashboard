@page "/"
@using ITM.Dashboard.Web.Client.Models
@inject IHttpClientFactory HttpClientFactory
@using System.Text.Json
@using System.Globalization
@using System.Text

<style>
    .compact-grid th,
    .compact-grid td {
        padding: 4px 10px !important;
        font-size: 0.8rem !important;
        line-height: 1.4 !important;
    }
    .mud-table-sticky-header .mud-table-container {
        height: 170px;
        overflow-y: auto;
    }
    .mud-table-sticky-header thead th {
        position: sticky;
        top: 0;
        z-index: 1;
        background-color: var(--mud-palette-surface, #fff);
    }
</style>

<PageTitle>Wafer Flat Data</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Wafer Flat Data</MudText>

<MudPaper Class="pa-4 mb-4">
    <MudGrid Spacing="2" AlignItems="AlignItems.Center">
        <MudItem xs="6" sm="2" md="1">
            <MudSelect T="string" Label="Site" Required="true" Value="_selectedSite" ValueChanged="OnSiteChanged" Dense="true" Margin="Margin.Dense">
                @foreach (var site in _sites)
                {
                    <MudSelectItem T="string" Value="@site">@site</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="6" sm="2" md="1">
            <MudSelect T="string" Label="SDWT" Value="_selectedSdwt" ValueChanged="OnSdwtChanged" Disabled="@(string.IsNullOrEmpty(_selectedSite))" Dense="true" Margin="Margin.Dense">
                @foreach (var sdwt in _sdwts)
                {
                    <MudSelectItem T="string" Value="@sdwt">@sdwt</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="4" md="1">
            <MudAutocomplete T="string" Label="EQP ID" Value="_selectedEqpid" ValueChanged="OnEqpidChanged" SearchFunc="SearchEqpids"
                             ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="false" Dense="true" Margin="Margin.Dense"
                             Disabled="@(string.IsNullOrEmpty(_selectedSdwt))" />
        </MudItem>
        <MudItem xs="12" sm="4" md="1">
            <MudAutocomplete T="string" Label="Lot ID" Value="_selectedLotId" ValueChanged="OnLotIdChanged" SearchFunc="SearchLotIds"
                             MaxItems="null" ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="false" Dense="true" Margin="Margin.Dense"
                             Disabled="@(string.IsNullOrEmpty(_selectedEqpid))" />
        </MudItem>
        <MudItem xs="12" sm="4" md="1">
            <MudAutocomplete T="string" Label="Wafer ID"
                             Value="_selectedWaferId" ValueChanged="OnWaferIdChanged"
                             SearchFunc="SearchWaferIds"
                             ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="false" Dense="true" Margin="Margin.Dense"
                             Disabled="@(string.IsNullOrEmpty(_selectedLotId))" />
        </MudItem>
        <MudItem xs="6" sm="3" md="2">
            <MudDatePicker Label="Start Date" Value="_startDate" DateChanged="OnDateFilterChanged"
                           MinDate="_minSelectableDate" MaxDate="_maxSelectableDate" Dense="true" Margin="Margin.Dense"
                           Disabled="@(string.IsNullOrEmpty(_selectedEqpid))" />
        </MudItem>
        <MudItem xs="6" sm="3" md="2">
            <MudDatePicker Label="End Date" Value="_endDate" DateChanged="OnDateFilterChanged"
                           MinDate="_minSelectableDate" MaxDate="_maxSelectableDate" Dense="true" Margin="Margin.Dense"
                           Disabled="@(string.IsNullOrEmpty(_selectedEqpid))" />
        </MudItem>
        <MudItem xs="4" sm="2" md="1">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SearchData" Disabled="@(string.IsNullOrEmpty(_selectedSite))" FullWidth="true">Search</MudButton>
        </MudItem>
        <MudItem xs="4" sm="2" md="1">
            <MudButton Variant="Variant.Outlined" OnClick="ResetFilters" FullWidth="true">Reset</MudButton>
        </MudItem>
        <MudItem xs="4" sm="2" md="1">
            <MudButton Variant="Variant.Text" OnClick="@(() => _showAdvancedFilters = !_showAdvancedFilters)" FullWidth="true">
                @(_showAdvancedFilters ? "상세조건 닫기" : "상세조건 열기")
            </MudButton>
        </MudItem>
    </MudGrid>

    <MudCollapse Expanded="_showAdvancedFilters" Class="mt-2">
        <MudGrid Spacing="2" AlignItems="AlignItems.Center">
            <MudItem xs="12" sm="6" md="3">
                <MudSelect T="string" Label="Cassette RCP"
                           Value="_selectedCassetteRcp" ValueChanged="(string val) => OnAdvancedFilterChanged(val, nameof(_selectedCassetteRcp))"
                           Disabled="@(string.IsNullOrEmpty(_selectedEqpid))" Clearable="true" Dense="true" Margin="Margin.Dense">
                    @foreach (var item in _cassetteRcps)
                    {
                        <MudSelectItem T="string" Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudSelect T="string" Label="Stage RCP"
                           Value="_selectedStageRcp" ValueChanged="(string val) => OnAdvancedFilterChanged(val, nameof(_selectedStageRcp))"
                           Disabled="@(string.IsNullOrEmpty(_selectedEqpid))" Clearable="true" Dense="true" Margin="Margin.Dense">
                    @foreach (var item in _stageRcps)
                    {
                        <MudSelectItem T="string" Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudSelect T="string" Label="Stage Group"
                           Value="_selectedStageGroup" ValueChanged="(string val) => OnAdvancedFilterChanged(val, nameof(_selectedStageGroup))"
                           Disabled="@(string.IsNullOrEmpty(_selectedEqpid))" Clearable="true" Dense="true" Margin="Margin.Dense">
                    @foreach (var item in _stageGroups)
                    {
                        <MudSelectItem T="string" Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudSelect T="string" Label="Film"
                           Value="_selectedFilm" ValueChanged="(string val) => OnAdvancedFilterChanged(val, nameof(_selectedFilm))"
                           Disabled="@(string.IsNullOrEmpty(_selectedEqpid))" Clearable="true" Dense="true" Margin="Margin.Dense">
                    @foreach (var item in _films)
                    {
                        <MudSelectItem T="string" Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
    </MudCollapse>
</MudPaper>

@if (_isGridVisible)
{
    <MudText Typo="Typo.h6" GutterBottom="true" Class="mt-4">Data Results</MudText>

    <MudDataGrid @ref="_dataGrid" T="WaferFlatDataDto" ServerData="LoadData" Striped="true" Hover="true" Dense="true" Class="compact-grid"
                 SelectedItemChanged="OnSelectedItemChanged"
                 RowStyleFunc="RowStyleFunc"
                 RowsPerPage="8">
        <Columns>
            <PropertyColumn Property="x => x.ServTs" Title="Date Time" Format="yyyy-MM-dd HH:mm:ss" />
            <PropertyColumn Property="x => x.LotId" Title="Lot ID" />
            <PropertyColumn Property="x => x.WaferId" Title="Wafer ID" />
            <PropertyColumn Property="x => x.CassetteRcp" Title="Cassette RCP" />
            <PropertyColumn Property="x => x.StageRcp" Title="Stage RCP" />
            <PropertyColumn Property="x => x.StageGroup" Title="Stage Group" />
            <PropertyColumn Property="x => x.Film" Title="Film" />
            <PropertyColumn Property="x => x.DateTime" Title="EQP Time" Format="yyyy-MM-dd HH:mm:ss" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="WaferFlatDataDto" HideRowsPerPage="true" />
        </PagerContent>
    </MudDataGrid>

    @if (_statistics != null)
    {
        <MudSimpleTable Dense="true" Hover="true" Class="compact-grid mud-table-sticky-header mt-4">
            <thead>
                <tr>
                    <th>Statistics</th>
                    <th style="text-align: right;">T1(Å)</th>
                    <th style="text-align: right;">GOF</th>
                    <th style="text-align: right;">Z(㎛)</th>
                    <th style="text-align: right;">SRVISZ(㎛)</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Max</td>
                    <td style="text-align: right;">@_statistics.T1.Max.ToString("F3")</td>
                    <td style="text-align: right;">@_statistics.Gof.Max.ToString("F4")</td>
                    <td style="text-align: right;">@_statistics.Z.Max.ToString("F4")</td>
                    <td style="text-align: right;">@_statistics.Srvisz.Max.ToString("F4")</td>
                </tr>
                <tr>
                    <td>Min</td>
                    <td style="text-align: right;">@_statistics.T1.Min.ToString("F3")</td>
                    <td style="text-align: right;">@_statistics.Gof.Min.ToString("F4")</td>
                    <td style="text-align: right;">@_statistics.Z.Min.ToString("F4")</td>
                    <td style="text-align: right;">@_statistics.Srvisz.Min.ToString("F4")</td>
                </tr>
                <tr>
                    <td>Range</td>
                    <td style="text-align: right;">@_statistics.T1.Range.ToString("F3")</td>
                    <td style="text-align: right;">@_statistics.Gof.Range.ToString("F4")</td>
                    <td style="text-align: right;">@_statistics.Z.Range.ToString("F4")</td>
                    <td style="text-align: right;">@_statistics.Srvisz.Range.ToString("F4")</td>
                </tr>
                <tr>
                    <td>Mean</td>
                    <td style="text-align: right;">@_statistics.T1.Mean.ToString("F3")</td>
                    <td style="text-align: right;">@_statistics.Gof.Mean.ToString("F4")</td>
                    <td style="text-align: right;">@_statistics.Z.Mean.ToString("F4")</td>
                    <td style="text-align: right;">@_statistics.Srvisz.Mean.ToString("F4")</td>
                </tr>
                <tr>
                    <td>StdD</td>
                    <td style="text-align: right;">@_statistics.T1.StdDev.ToString("F3")</td>
                    <td style="text-align: right;">@_statistics.Gof.StdDev.ToString("F4")</td>
                    <td style="text-align: right;">@_statistics.Z.StdDev.ToString("F4")</td>
                    <td style="text-align: right;">@_statistics.Srvisz.StdDev.ToString("F4")</td>
                </tr>
                <tr>
                    <td>%StdD</td>
                    <td style="text-align: right;">@_statistics.T1.PercentStdDev.ToString("F3")</td>
                    <td style="text-align: right;">@_statistics.Gof.PercentStdDev.ToString("F4")</td>
                    <td style="text-align: right;">@_statistics.Z.PercentStdDev.ToString("F4")</td>
                    <td style="text-align: right;">@_statistics.Srvisz.PercentStdDev.ToString("F4")</td>
                </tr>
                <tr>
                    <td>%NonU</td>
                    <td style="text-align: right;">@_statistics.T1.PercentNonU.ToString("F3")</td>
                    <td style="text-align: right;">@_statistics.Gof.PercentNonU.ToString("F4")</td>
                    <td style="text-align: right;">@_statistics.Z.PercentNonU.ToString("F4")</td>
                    <td style="text-align: right;">@_statistics.Srvisz.PercentNonU.ToString("F4")</td>
                </tr>
            </tbody>
        </MudSimpleTable>
    }

    @if (_selectedRowItem != null)
    {
        <MudText Typo="Typo.h6" GutterBottom="true" Class="mt-4">포인트 데이터 (Point Data)</MudText>

        @if (_isPointDataLoading)
        {
            <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="mt-4" />
        }
        else if (_pointData != null && _pointData.Headers.Any())
        {
            <MudSimpleTable Dense="true" Hover="true" Class="compact-grid mud-table-sticky-header" Height="300px">
                <thead>
                    <tr>
                        @foreach (var header in _pointData.Headers)
                        {
                            <th style="text-align: right;">@header</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var row in _pointData.Data)
                    {
                        <tr>
                            @foreach (var cell in row)
                            {
                                <td style="text-align: right;">
                                    @FormatValue(cell)
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        }
        else
        {
            <MudText Class="mt-4">선택된 항목에 대한 포인트 데이터가 없습니다.</MudText>
        }
    }
}
else
{
    <MudAlert Severity="Severity.Info" Class="mt-4">EQP ID를 선택하시면 데이터가 표시됩니다.</MudAlert>
}


@code {
    private MudDataGrid<WaferFlatDataDto> _dataGrid = default!;
    private bool _isGridVisible = false;
    private List<string> _sites = new();
    private List<string> _sdwts = new();
    private List<string> _eqpids = new();
    private List<string> _lotIds = new();
    private List<string> _waferIds = new();
    private List<string> _cassetteRcps = new();
    private List<string> _stageRcps = new();
    private List<string> _stageGroups = new();
    private List<string> _films = new();
    private string? _selectedSite;
    private string? _selectedSdwt;
    private string? _selectedEqpid;
    private string? _selectedLotId;
    private string? _selectedWaferId;
    private DateTime? _startDate;
    private DateTime? _endDate;
    private DateTime? _minSelectableDate;
    private DateTime? _maxSelectableDate;
    private bool _showAdvancedFilters;
    private string? _selectedCassetteRcp;
    private string? _selectedStageRcp;
    private string? _selectedStageGroup;
    private string? _selectedFilm;
    private WaferFlatDataDto? _selectedRowItem;
    private StatisticsDto? _statistics;
    private PointDataResponseDto? _pointData;
    private bool _isPointDataLoading = false;

    protected override async Task OnInitializedAsync() => await LoadSites();

    private Func<WaferFlatDataDto, int, string> RowStyleFunc => (item, index) =>
    {
        if (_selectedRowItem != null && _selectedRowItem.Equals(item))
        {
            return "background-color: #E3F2FD; color: var(--mud-palette-text-primary);";
        }
        return string.Empty;
    };

    private async Task OnSelectedItemChanged(WaferFlatDataDto item)
    {
        _selectedRowItem = item;
        await LoadRowDetails(item);
    }

    private async Task LoadRowDetails(WaferFlatDataDto? item)
    {
        if (item?.LotId == null || item.WaferId == null || item.ServTs == null || item.DateTime == null || item.CassetteRcp == null || item.StageRcp == null || item.StageGroup == null || item.Film == null)
        {
            _statistics = null;
            _pointData = null;
            StateHasChanged();
            return;
        }

        _statistics = null;
        _pointData = null;
        _isPointDataLoading = true;
        StateHasChanged();

        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        var queryParams = new List<string>
        {
            $"lotId={Uri.EscapeDataString(item.LotId)}",
            $"waferId={item.WaferId}",
            $"servTs={item.ServTs.Value:o}",
            $"dateTime={item.DateTime.Value:o}",
            $"cassetteRcp={Uri.EscapeDataString(item.CassetteRcp)}",
            $"stageRcp={Uri.EscapeDataString(item.StageRcp)}",
            $"stageGroup={Uri.EscapeDataString(item.StageGroup)}",
            $"film={Uri.EscapeDataString(item.Film)}"
        };
        var queryString = string.Join("&", queryParams);

        try
        {
            var statsTask = client.GetFromJsonAsync<StatisticsDto>($"api/Statistics?{queryString}");
            var pointDataTask = client.GetFromJsonAsync<PointDataResponseDto>($"api/WaferData/pointdata?{queryString}");

            await Task.WhenAll(statsTask, pointDataTask);

            _statistics = await statsTask;
            _pointData = await pointDataTask;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching details: {ex.Message}");
            _statistics = null;
            _pointData = null;
        }
        finally
        {
            _isPointDataLoading = false;
            StateHasChanged();
        }
    }

    private string FormatValue(object value)
    {
        if (value is JsonElement jsonElement)
        {
            if (jsonElement.ValueKind == JsonValueKind.Number)
            {
                if (jsonElement.TryGetInt64(out long longValue) && jsonElement.GetRawText().IndexOf('.') == -1)
                {
                    return longValue.ToString();
                }
                if (jsonElement.TryGetDouble(out double doubleValue))
                {
                    return doubleValue.ToString(CultureInfo.InvariantCulture);
                }
            }
            return jsonElement.ToString();
        }

        if (value is int || value is long || value is short || value is byte ||
            value is double || value is float || value is decimal)
        {
            return Convert.ToString(value, CultureInfo.InvariantCulture);
        }
        
        return value?.ToString() ?? string.Empty;
    }

    private string BuildFilterQuery()
    {
        var queryBuilder = new StringBuilder();
        if (string.IsNullOrEmpty(_selectedEqpid)) return string.Empty;

        queryBuilder.Append($"eqpid={Uri.EscapeDataString(_selectedEqpid)}");

        if (_startDate.HasValue) queryBuilder.Append($"&startDate={_startDate.Value:yyyy-MM-dd}");
        if (_endDate.HasValue) queryBuilder.Append($"&endDate={_endDate.Value:yyyy-MM-dd}");
        if (!string.IsNullOrEmpty(_selectedLotId)) queryBuilder.Append($"&lotId={Uri.EscapeDataString(_selectedLotId)}");
        if (int.TryParse(_selectedWaferId, out var waferId)) queryBuilder.Append($"&waferId={waferId}");
        if (!string.IsNullOrEmpty(_selectedCassetteRcp)) queryBuilder.Append($"&cassetteRcp={Uri.EscapeDataString(_selectedCassetteRcp)}");
        if (!string.IsNullOrEmpty(_selectedStageRcp)) queryBuilder.Append($"&stageRcp={Uri.EscapeDataString(_selectedStageRcp)}");
        if (!string.IsNullOrEmpty(_selectedStageGroup)) queryBuilder.Append($"&stageGroup={Uri.EscapeDataString(_selectedStageGroup)}");
        if (!string.IsNullOrEmpty(_selectedFilm)) queryBuilder.Append($"&film={Uri.EscapeDataString(_selectedFilm)}");

        return queryBuilder.ToString();
    }

    private async Task UpdateAllFilters()
    {
        if (string.IsNullOrEmpty(_selectedEqpid)) return;
        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        var query = BuildFilterQuery();
        
        _lotIds = await client.GetFromJsonAsync<List<string>>($"api/Filters/lotids?{query}") ?? new();
        _waferIds = await client.GetFromJsonAsync<List<string>>($"api/Filters/waferids?{query}") ?? new();
        _cassetteRcps = await client.GetFromJsonAsync<List<string>>($"api/Filters/cassettercps?{query}") ?? new();
        _stageRcps = await client.GetFromJsonAsync<List<string>>($"api/Filters/stagercps?{query}") ?? new();
        _stageGroups = await client.GetFromJsonAsync<List<string>>($"api/Filters/stagegroups?{query}") ?? new();
        _films = await client.GetFromJsonAsync<List<string>>($"api/Filters/films?{query}") ?? new();
        
        if (!string.IsNullOrEmpty(_selectedLotId) && !_lotIds.Contains(_selectedLotId)) _selectedLotId = null;
        if (!string.IsNullOrEmpty(_selectedWaferId) && !_waferIds.Contains(_selectedWaferId)) _selectedWaferId = null;
        if (!string.IsNullOrEmpty(_selectedCassetteRcp) && !_cassetteRcps.Contains(_selectedCassetteRcp)) _selectedCassetteRcp = null;
        if (!string.IsNullOrEmpty(_selectedStageRcp) && !_stageRcps.Contains(_selectedStageRcp)) _selectedStageRcp = null;
        if (!string.IsNullOrEmpty(_selectedStageGroup) && !_stageGroups.Contains(_selectedStageGroup)) _selectedStageGroup = null;
        if (!string.IsNullOrEmpty(_selectedFilm) && !_films.Contains(_selectedFilm)) _selectedFilm = null;
        
        StateHasChanged();
    }

    private async Task LoadSites()
    {
        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        _sites = await client.GetFromJsonAsync<List<string>>("api/Filters/sites") ?? new();
    }

    private async Task OnSiteChanged(string newSite)
    {
        _selectedSite = newSite;
        ResetDependentFilters("site");
        if (!string.IsNullOrEmpty(_selectedSite))
        {
            var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
            _sdwts = await client.GetFromJsonAsync<List<string>>($"api/Filters/sdwts/{_selectedSite}") ?? new();
        }
    }

    private async Task OnSdwtChanged(string newSdwt)
    {
        _selectedSdwt = newSdwt;
        ResetDependentFilters("sdwt");
        if (!string.IsNullOrEmpty(_selectedSdwt))
        {
            var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
            _eqpids = await client.GetFromJsonAsync<List<string>>($"api/Filters/eqpids/{_selectedSdwt}") ?? new();
        }
    }

    private async Task OnEqpidChanged(string newEqpid)
    {
        _selectedEqpid = newEqpid;
        ResetDependentFilters("eqpid");
        _isGridVisible = !string.IsNullOrEmpty(_selectedEqpid);
        _selectedRowItem = null;
        _statistics = null;
        _pointData = null;
        if (_isGridVisible)
        {
            await InitializeDateFilters(_selectedEqpid);
            await UpdateAllFilters();
            if (_dataGrid is not null) await _dataGrid.ReloadServerData();
        }
    }

    private async Task OnLotIdChanged(string newLotId)
    {
        if (_selectedLotId == newLotId) return;
        _selectedLotId = newLotId;
        ResetDependentFilters("lotid");
        await UpdateAllFilters();
    }

    private async Task OnWaferIdChanged(string? newWaferId)
    {
        if (_selectedWaferId == newWaferId) return;
        _selectedWaferId = newWaferId;
        await UpdateAllFilters();
    }

    private async Task OnDateFilterChanged(DateTime? newDate)
    {
        await UpdateAllFilters();
    }

    private async Task OnAdvancedFilterChanged(string value, string filterName)
    {
        switch (filterName)
        {
            case nameof(_selectedCassetteRcp): _selectedCassetteRcp = value; break;
            case nameof(_selectedStageRcp): _selectedStageRcp = value; break;
            case nameof(_selectedStageGroup): _selectedStageGroup = value; break;
            case nameof(_selectedFilm): _selectedFilm = value; break;
        }
        await UpdateAllFilters();
    }

    private async Task InitializeDateFilters(string eqpid)
    {
        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        var dateRange = await client.GetFromJsonAsync<DateRangeDto>($"api/Filters/daterange?eqpid={eqpid}");
        if (dateRange is not null)
        {
            _minSelectableDate = dateRange.MinDate;
            _maxSelectableDate = dateRange.MaxDate;
            _startDate = _minSelectableDate;
            _endDate = _maxSelectableDate;
        }
    }

    private async Task<IEnumerable<string>> SearchEqpids(string value, CancellationToken token)
    {
        await Task.Yield();
        if (string.IsNullOrEmpty(value)) return _eqpids;
        return _eqpids.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase)) ?? Enumerable.Empty<string>();
    }

    private async Task<IEnumerable<string>> SearchLotIds(string value, CancellationToken token)
    {
        await Task.Yield();
        if (!string.IsNullOrEmpty(value) && value == _selectedLotId) return _lotIds;
        if (string.IsNullOrEmpty(value)) return _lotIds;
        return _lotIds.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase)) ?? Enumerable.Empty<string>();
    }

    private async Task<IEnumerable<string>> SearchWaferIds(string value, CancellationToken token)
    {
        await Task.Yield();
        if (string.IsNullOrEmpty(value)) return _waferIds;
        return _waferIds.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase)) ?? Enumerable.Empty<string>();
    }

    private async Task SearchData()
    {
        if (_dataGrid is not null)
        {
            _selectedRowItem = null;
            _statistics = null;
            _pointData = null;
            await _dataGrid.ReloadServerData();
        }
    }

    private void ResetDependentFilters(string level)
    {
        if (level == "site") { _selectedSdwt = null; _sdwts.Clear(); }
        if (level == "site" || level == "sdwt") { _selectedEqpid = null; _eqpids.Clear(); _isGridVisible = false; }
        if (level == "site" || level == "sdwt" || level == "eqpid") { _selectedLotId = null; }
        if (level == "site" || level == "sdwt" || level == "eqpid" || level == "lotid") { _selectedWaferId = null; }
    }

    private async Task ResetFilters()
    {
        _selectedSite = null;
        _selectedSdwt = null;
        _selectedEqpid = null;
        _selectedLotId = null;
        _selectedWaferId = null;
        _startDate = null;
        _endDate = null;
        _minSelectableDate = null;
        _maxSelectableDate = null;
        _selectedCassetteRcp = null;
        _selectedStageRcp = null;
        _selectedStageGroup = null;
        _selectedFilm = null;
        _sdwts.Clear();
        _eqpids.Clear();
        _lotIds.Clear();
        _waferIds.Clear();
        _cassetteRcps.Clear();
        _stageRcps.Clear();
        _stageGroups.Clear();
        _films.Clear();
        _isGridVisible = false;
        _selectedRowItem = null;
        _statistics = null;
        _pointData = null;
        if (_dataGrid is not null)
        {
            await _dataGrid.ReloadServerData();
        }
        StateHasChanged();
    }

    private async Task<GridData<WaferFlatDataDto>> LoadData(GridState<WaferFlatDataDto> state)
    {
        if (string.IsNullOrEmpty(_selectedEqpid))
        {
            return new GridData<WaferFlatDataDto>() { Items = new List<WaferFlatDataDto>(), TotalItems = 0 };
        }

        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        var query = new List<string> { $"page={state.Page}", $"pageSize={state.PageSize}" };

        var sort = state.SortDefinitions.FirstOrDefault();
        if (sort != null && !string.IsNullOrEmpty(sort.SortBy))
        {
            query.Add($"sortLabel={Uri.EscapeDataString(sort.SortBy)}");
            var direction = sort.Descending ? "Descending" : "Ascending";
            query.Add($"sortDirection={direction}");
        }

        var filterQuery = BuildFilterQuery();
        if (!string.IsNullOrEmpty(filterQuery))
        {
             query.Add(filterQuery);
        }
        
        var url = $"api/WaferData/flatdata?{string.Join("&", query)}";
        try
        {
            var response = await client.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                using (var jsonDoc = JsonDocument.Parse(content))
                {
                    var root = jsonDoc.RootElement;
                    var itemsJson = root.GetProperty("items").GetRawText();
                    var totalItems = root.GetProperty("totalItems").GetInt64();
                    var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                    var items = JsonSerializer.Deserialize<List<WaferFlatDataDto>>(itemsJson, options);
                    if (items is not null)
                    {
                        return new GridData<WaferFlatDataDto>() { Items = items, TotalItems = (int)totalItems };
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"데이터를 가져오는 중 오류 발생: {ex.Message}");
        }
        return new GridData<WaferFlatDataDto>() { Items = new List<WaferFlatDataDto>(), TotalItems = 0 };
    }
}
