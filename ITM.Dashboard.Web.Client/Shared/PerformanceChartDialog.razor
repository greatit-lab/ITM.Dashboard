@* // ITM.Dashboard.Web.Client/Shared/PerformanceChartDialog.razor *@
@using ITM.Dashboard.Web.Client.Models
@using ITM.Dashboard.Web.Client.Shared
@using MudBlazor
@inject IHttpClientFactory HttpClientFactory

<MudDialog>
    <TitleContent>
        <div class="d-flex align-center">
            <MudText Typo="Typo.h6">@EqpId 성능 현황 (최근 24시간, 5분 평균)</MudText>
        </div>
    </TitleContent>
    <DialogContent>
        @if (_isChartLoading)
        {
            <div class="d-flex justify-center align-center" style="height: 400px;">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>
        }
        else if (_chartData != null && _chartData.Any())
        {
            <AmChart ChartData="_chartData" ChartConfig="_chartConfig" Height="400px" />
        }
        else
        {
            <div class="d-flex justify-center align-center" style="height: 400px;">
                <MudText>선택된 장비의 최근 24시간 성능 데이터가 없습니다.</MudText>
            </div>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">닫기</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public string EqpId { get; set; }

    private bool _isChartLoading = true;
    private List<PerformanceDataPointDto> _chartData = new();
    private object _chartConfig;

    protected override async Task OnInitializedAsync()
    {
        // amCharts 설정을 정의합니다.
        _chartConfig = new
        {
            xField = "timestamp",
            xTimeUnit = "minute",
            xAxisDateFormat = "HH:mm", // X축에 시간:분 형식으로 표시
            series = new[]
            {
                // JavaScript 파일에서 seriesType: "line"을 보고 선 그래프를 그립니다.
                new { name = "CPU", valueField = "cpuUsage", seriesType = "line" },
                new { name = "Memory", valueField = "memoryUsage", seriesType = "line" }
            }
        };
        
        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        try
        {
            _chartData = await client.GetFromJsonAsync<List<PerformanceDataPointDto>>($"api/dashboard/performancehistory/{EqpId}") ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"차트 데이터 로드 실패: {ex.Message}");
            _chartData.Clear();
        }
        finally
        {
            _isChartLoading = false;
        }
    }

    void Cancel() => MudDialog.Cancel();
}
