@* // ITM.Dashboard.Web.Client/Shared/PerformanceChartDialog.razor *@
@using ITM.Dashboard.Web.Client.Models
@using MudBlazor
@inject IHttpClientFactory HttpClientFactory

<style>
    .mud-charts-xaxis-text {
        transform: rotate(-45deg);
        text-anchor: end;
    }
</style>

<MudDialog>
    <TitleContent>
        <div class="d-flex align-center">
            <MudText Typo="Typo.h6">@EqpId 성능 현황 (최근 24시간, 5분 평균)</MudText>
            <MudSpacer />
            @if (_selectedIndex > -1 && _chartData.Count > _selectedIndex)
            {
                <MudText Class="mr-4">
                    <span class="font-weight-bold">CPU:</span> @(_chartData[_selectedIndex].CpuUsage.ToString("F2"))%
                    <span class="font-weight-bold ml-2">Memory:</span> @(_chartData[_selectedIndex].MemoryUsage.ToString("F2"))%
                </MudText>
            }
        </div>
    </TitleContent>

    <DialogContent>
        @if (_isChartLoading)
        {
            <div class="d-flex justify-center align-center" style="height: 400px;">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>
        }
        else if (_chartData != null && _chartData.Any())
        {
            <MudChart 
                @bind-SelectedIndex="_selectedIndex" 
                ChartType="ChartType.Line" 
                ChartSeries="_chartSeries" 
                XAxisLabels="_chartXAxisLabels" 
                Width="100%" Height="400px" 
                Options="@_chartJsOptions" />
        }
        else
        {
            <div class="d-flex justify-center align-center" style="height: 400px;">
                <MudText>선택된 장비의 최근 24시간 성능 데이터가 없습니다.</MudText>
            </div>
        }
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">닫기</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public string EqpId { get; set; }

    private int _selectedIndex = -1;
    private bool _isChartLoading = true;
    private List<PerformanceDataPointDto> _chartData = new();
    private List<ChartSeries> _chartSeries = new();
    private string[] _chartXAxisLabels = Array.Empty<string>();
    private object _chartJsOptions; // <-- 여기에 최종 Chart.js 옵션을 담기

    protected override async Task OnInitializedAsync()
    {
        _chartJsOptions = new
        {
            scales = new
            {
                x = new
                {
                    ticks = new
                    {
                        autoSkip = true,
                        maxTicksLimit = 12,
                        maxRotation = 0,
                        minRotation = 0
                    }
                }
            }
        };

        var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
        try
        {
            _chartData = await client.GetFromJsonAsync<List<PerformanceDataPointDto>>($"api/dashboard/performancehistory/{EqpId}") ?? new();
            PrepareChartData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"차트 데이터 로드 실패: {ex.Message}");
            _chartData.Clear();
        }
        finally
        {
            _isChartLoading = false;
        }
    }

    private void PrepareChartData()
    {
        _chartSeries = new List<ChartSeries>
        {
            new ChartSeries { Name = "CPU", Data = _chartData.Select(d => Math.Round(d.CpuUsage, 2)).ToArray() },
            new ChartSeries { Name = "Memory", Data = _chartData.Select(d => Math.Round(d.MemoryUsage, 2)).ToArray() }
        };

        _chartXAxisLabels = _chartData.Select(d =>
            // (d.Timestamp.Minute == 0 && d.Timestamp.Hour % 2 == 0) ? d.Timestamp.ToString("HH:mm") : ""    // x축 라벨 2hr 간격
            d.Timestamp.Minute == 0 ? d.Timestamp.ToString("HH:mm") : ""
        ).ToArray();
    }

    void Cancel() => MudDialog.Cancel();
}
