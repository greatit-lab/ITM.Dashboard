@* // ITM.Dashboard.Web.Client/Shared/PerformanceChartDialog.razor *@

@using ITM.Dashboard.Web.Client.Models
@using ITM.Dashboard.Web.Client.Shared
@using MudBlazor
@inject IHttpClientFactory HttpClientFactory

<MudDialog>
    <TitleContent>
        <div class="d-flex align-center">
            <MudText Typo="Typo.h6">@EqpId 호기 Performance Trend (Last 24 Horus)</MudText>
        </div>
    </TitleContent>
    <DialogContent>
        <div class="chart-dialog-container">
            @if (_isChartLoading)
            {
                <div class="d-flex justify-center align-center" style="height: 100%;">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                </div>
            }
            else if (_chartData != null && _chartData.Any())
            {
                @* ▼▼▼ [수정] ChartType을 다이얼로그 전용 Maker 이름으로 변경합니다. ▼▼▼ *@
                <AmChart ChartData="_chartData" ChartConfig="_chartConfig" Height="100%" ChartType="PerformanceDialogChart" />
            }
            else
            {
                <div class="d-flex justify-center align-center" style="height: 100%;">
                    <MudText>선택된 장비의 최근 24시간 성능 데이터가 없습니다.</MudText>
                </div>
            }
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public string EqpId { get; set; }

    private bool _isChartLoading = true;
    private List<PerformanceDataPointDto> _chartData = new();
    private object _chartConfig;

    protected override void OnInitialized()
    {
        // ▼▼▼ [수정] 요청하신 5가지 개선 사항을 C# 설정 객체에 모두 반영합니다. ▼▼▼
        _chartConfig = new
        {
            xField = "timestamp",
            xTimeUnit = "minute",
            xAxisDateFormat = "MM-dd HH:mm", // ✅ 2. X축 라벨 형식 변경
            series = new[]
            {
                new {
                    name = "CPU",
                    valueField = "cpuUsage",
                    color = "#33b2ff",
                    bulletRadius = 3, // ✅ 1. 데이터 포인트(bullet) 표시
                    tooltipText = "{valueX.formatDate('HH:mm')} {name}: {valueY.formatNumber('#.00')}%" // ✅ 3. 툴팁 형식
                },
                new {
                    name = "Memory",
                    valueField = "memoryUsage",
                    color = "#39e6a3",
                    bulletRadius = 3, // ✅ 1. 데이터 포인트(bullet) 표시
                    tooltipText = "{valueX.formatDate('HH:mm')} {name}: {valueY.formatNumber('#.00')}%" // ✅ 3. 툴팁 형식
                }
            }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(50); // 모달 애니메이션을 위한 짧은 지연

            var client = HttpClientFactory.CreateClient("ITM.Dashboard.Api");
            try
            {
                _chartData = await client.GetFromJsonAsync<List<PerformanceDataPointDto>>($"api/dashboard/performancehistory/{EqpId}") ?? new();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"차트 데이터 로드 실패: {ex.Message}");
                _chartData.Clear();
            }
            finally
            {
                _isChartLoading = false;
                StateHasChanged(); // UI를 다시 렌더링하여 차트를 그리게 함
            }
        }
    }

    void Cancel() => MudDialog.Cancel();
}
